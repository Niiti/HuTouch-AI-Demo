/*[
  {
    "name": "PrimaryButton",
    "description": "A full-width button with rounded corners and bold label, used for primary actions. Instances include: 'Next', 'Join Now', 'Sign In', 'Send Code', 'Confirm New Password', 'Verify Email', 'Book Now', 'Checkout', 'Pay Now', 'Show Result', 'Enable My Location', 'Get Started', 'Join with Email'.",
    "standardization": "Allow dynamic label text, onPress handler, optional icon (left/aligned), enabled/disabled state.",
    "styling_changes": "Minor height or width adjustments depending on context; consistent teal background, white bold text, 8px+ radius. Margins/padding can shift slightly per screen.",
    "code": "// lib/modules/shop_details_scrolled_service_selected/widgets/primary_button.dart\nimport 'package:flutter/material.dart';\nimport 'package:salon_app_hutouch_ai/core/constants/color_palette.dart';\n\nclass PrimaryButton extends StatelessWidget {\n  final String text;\n  final VoidCallback? onPressed;\n  final Widget? icon;\n  final bool enabled;\n  const PrimaryButton({\n    required this.text,\n    required this.onPressed,\n    this.icon,\n    this.enabled = true,\n    Key? key,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final size = MediaQuery.of(context).size;\n    return ElevatedButton(\n      onPressed: enabled ? onPressed : null,\n      style: ElevatedButton.styleFrom(\n        backgroundColor: AppColors.primary,\n        minimumSize: const Size.fromHeight(48),\n        padding: const EdgeInsets.symmetric(vertical: 12),\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(8),\n        ),\n        elevation: enabled ? 2 : 0,\n      ),\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.center,\n        mainAxisSize: MainAxisSize.max,\n        children: [\n          if (icon != null) ...[\n            icon!,\n            SizedBox(width: size.width * 0.01),\n          ],\n          Text(\n            text,\n            style: TextStyle(\n              color: Colors.white,\n              fontWeight: FontWeight.bold,\n              fontSize: size.height * 0.02,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "name": "SecondaryButtonOutlined",
    "description": "Full-width or content-width button with outlined border, rounded corners, regular text, sometimes with icon (like Google logo). Instances include: 'Join with Google', 'Sign In with Google', 'View All Services'.",
    "standardization": "Dynamic label/text, onPress handler, optional left icon, border color as parameter for theming.",
    "styling_changes": "Outline thickness and color remain consistent; width can be full or content-based. Padding adjusts slightly with/without icon.",
    "code": "// lib/modules/home_screen/widgets/featured_salon_section.dart\nclass SecondaryButtonOutlined extends StatelessWidget {\n  final String text;\n  final VoidCallback? onPressed;\n  final Color borderColor;\n  final Color textColor;\n  final Widget? icon;\n\n  const SecondaryButtonOutlined({\n    Key? key,\n    required this.text,\n    this.onPressed,\n    required this.borderColor,\n    required this.textColor,\n    this.icon,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final fontSize = MediaQuery.of(context).size.height * 0.020;\n    return OutlinedButton(\n      onPressed: onPressed,\n      style: OutlinedButton.styleFrom(\n        side: BorderSide(color: borderColor, width: 1.5),\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(28)),\n        padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 2),\n        minimumSize: const Size(0, 0),\n        tapTargetSize: MaterialTapTargetSize.shrinkWrap,\n      ),\n      child: Row(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          if (icon != null) ...[icon!, const SizedBox(width: 8)],\n          Text(\n            text,\n            style: TextStyle(\n              color: textColor,\n              fontFamily: Fonts.manrope,\n              fontWeight: FontWeight.w600,\n              fontSize: fontSize,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "name": "BottomNavigationBar",
    "description": "A persistent bottom bar displaying between 3-5 navigation icons, indicating active tab with shape or color. Instances found in home, nearby, messages, booking, calendar, and other main app screens.",
    "standardization": "Accept a tabs array (label, icon, route) and currentTab, with onTabSelected handler.",
    "styling_changes": "Margins and icon sizes adapt to device width; active icon highlighted with color/dot.",
    "code": "//lib/modules/home_screen/widgets/bottom_nav_bar_section.dart\r\n\r\nimport \'package:flutter/material.dart\';\r\nimport \'package:salon_app_hutouch_ai/core/constants/app_constants.dart\';\r\nimport \'package:salon_app_hutouch_ai/modules/home_screen/widgets/nav_bar_item.dart\';\r\n\r\nclass BottomNavBarSection extends StatelessWidget {\r\n  const BottomNavBarSection({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final width = MediaQuery.of(context).size.width;\r\n    final height = MediaQuery.of(context).size.height;\r\n    final horzPadding = width * 0.04;\r\n    final vertPadding = height * 0.01;\r\n    return Container(\r\n      padding: EdgeInsets.symmetric(horizontal: horzPadding, vertical: vertPadding),\r\n      decoration: const BoxDecoration(\r\n        color: Colors.white,\r\n        boxShadow: [BoxShadow(color: Color.fromRGBO(43, 43, 43, 0.04), offset: Offset(0, -1))],\r\n      ),\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n        children: const [\r\n          NavBarItem(assetPath: ImagesAsset.bottomHomeIcon, label: AppStrings.navExplore),\r\n          NavBarItem(assetPath: ImagesAsset.bottomDiscoverIcon, label: AppStrings.navNearby),\r\n          NavBarItem(assetPath: ImagesAsset.bottomCalendarIcon, label: AppStrings.navAppointment),\r\n          NavBarItem(assetPath: ImagesAsset.bottomDownloadsIcon, label: AppStrings.navInbox),\r\n          NavBarItem(assetPath: ImagesAsset.bottomProfileIcon, label: AppStrings.navProfile),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
  },
  {
    "name": "TextInputField",
    "description": "Input field with light background, icon on left, placeholder text, rounded corners. Used for: Name, Email, Mobile number, Password, OTP, Search.",
    "standardization": "Props for placeholder, icon, input type (password, text, phone), value, onChange, secureEntry toggle.",
    "styling_changes": "Width adjusts (full/content), icons change depending on field, minor border color/shadow changes.",
    "code": ""
  },
  {
    "name": "TabPillSelector",
    "description": "Horizontal pill-shaped selectable tabs for filtering or navigation. Instances: Service filter ('Hair', 'Nails', etc.), category filters on search, map, service menu, filter modal.",
    "standardization": "Dynamic list of options, selectedIndex, onSelect callback, pill label as parameter.",
    "styling_changes": "Spacing, font weight/color on selected pill, minor width expansion for long labels.",
    "code": "// lib/modules/home_screen/widgets/categories_section.dart\nclass TabPillSelector extends StatelessWidget {\n  final List<String> options;\n  final List<String> assetPaths;\n  final int selectedIndex;\n  final ValueChanged<int> onSelect;\n\n  const TabPillSelector({\n    Key? key,\n    required this.options,\n    required this.assetPaths,\n    required this.selectedIndex,\n    required this.onSelect,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final width = MediaQuery.of(context).size.width;\n    final pillHeight = width * 0.18;\n    final pillIconSize = width * 0.07;\n    return SingleChildScrollView(\n      scrollDirection: Axis.horizontal,\n      child: Row(\n        children: List.generate(options.length, (i) {\n          final selected = selectedIndex == i;\n          return GestureDetector(\n            onTap: () => onSelect(i),\n            child: Container(\n              margin: EdgeInsets.only(right: width * 0.035),\n              padding: EdgeInsets.symmetric(horizontal: width * 0.045, vertical: width * 0.025),\n              decoration: BoxDecoration(\n                color: selected ? const Color.fromRGBO(21, 103, 120, 1) : const Color.fromRGBO(224, 245, 249, 1),\n                borderRadius: BorderRadius.circular(48),\n              ),\n              child: Row(\n                children: [\n                  Image.asset(\n                    assetPaths[i],\n                    width: pillIconSize,\n                    color: selected ? Colors.white : const Color.fromRGBO(21, 103, 120, 1),\n                  ),\n                  SizedBox(width: width * 0.008),\n                  Text(\n                    options[i],\n                    style: TextStyle(\n                      fontSize: width * 0.037,\n                      fontFamily: Fonts.manrope,\n                      fontWeight: selected ? FontWeight.w700 : FontWeight.w600,\n                      color: selected ? Colors.white : const Color.fromRGBO(21, 103, 120, 1),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          );\n        }),\n      ),\n    );\n  }\n}\n"
  },
  {
    "name": "AvatarCircleList",
    "description": "Row of circular avatar/profile images (sometimes with border or check), for following/followers, specialists, salon list. Instances: 'Salon you follow', 'Our Specialist', 'Book Service Specialist'.",
    "standardization": "Accepts avatar image URLs, label/name/text, onPress/select handler, optional selection/active indicator.",
    "styling_changes": "Avatar size may adjust per usage, selected avatar may have thicker/different border.",
    "code": "// lib/modules/home_screen/widgets/salon_follow_section.dart\nclass AvatarCircleList extends StatelessWidget {\n  final List<Map<String, String>> avatars;\n  final double avatarSize;\n  final ValueChanged<int>? onTap;\n  final int? selectedIndex;\n\n  const AvatarCircleList({\n    Key? key,\n    required this.avatars,\n    required this.avatarSize,\n    this.onTap,\n    this.selectedIndex,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      height: avatarSize,\n      child: ListView.separated(\n        scrollDirection: Axis.horizontal,\n        itemCount: avatars.length,\n        separatorBuilder: (_, __) => SizedBox(width: avatarSize * 0.2),\n        itemBuilder: (context, i) {\n          final borderColor =\n              selectedIndex != null && selectedIndex == i ? const Color.fromRGBO(21, 103, 120, 1) : Colors.white;\n          final borderWidth = selectedIndex != null && selectedIndex == i ? 3.0 : 2.0;\n          return GestureDetector(\n            onTap: () => onTap?.call(i),\n            child: Container(\n              width: avatarSize,\n              height: avatarSize,\n              decoration: BoxDecoration(\n                shape: BoxShape.circle,\n                border: Border.all(color: borderColor, width: borderWidth),\n                image: DecorationImage(\n                  image: AssetImage(avatars[i]['image'] ?? ''),\n                  fit: BoxFit.cover,\n                ),\n              ),\n              alignment: Alignment.bottomCenter,\n              child: avatars[i]['label']?.isNotEmpty ?? false\n                  ? Container(\n                      margin: EdgeInsets.only(bottom: 3),\n                      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),\n                      decoration: BoxDecoration(\n                        color: Colors.black.withOpacity(0.45),\n                        borderRadius: BorderRadius.circular(8),\n                      ),\n                      child: Text(\n                        avatars[i]['label']!,\n                        style: TextStyle(\n                          color: Colors.white,\n                          fontSize: avatarSize * 0.18,\n                          fontFamily: Fonts.manrope,\n                        ),\n                      ),\n                    )\n                  : null,\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n"
  },
  {
    "name": "HorizontalImageCard",
    "description": "Rectangular card with left-aligned image, text content, and optional badge (like discount or km) on right or top corner. Used in salon lists, featured offers, service menu, card lists.",
    "standardization": "Dynamic image src, title, subtitle, right badge/label, optional favorite/like button.",
    "styling_changes": "Card width/light shadow/radius adapts per screen; badge style (color/text/bg) parameterized.",
    "code": ""
  },
  {
    "name": "OTPInput",
    "description": "Row of 4 rectangular single-character input boxes used for entering OTP codes. Used in 'Email verification' and potentially any OTP flow.",
    "standardization": "Dynamic length (but mostly 4-6), onChange handler for each cell, auto-focus and error state.",
    "styling_changes": "Spacing between fields can adjust based on width; border color for focus/error.",
    "code": ""
  },
  {
    "name": "HorizontalDividerOr",
    "description": "Divider with the word 'or' centered between two lines, used to separate login/registration methods.",
    "standardization": "Customizable label text ('or'), divider color and length as parameters.",
    "styling_changes": "Margin above/below can change; thickness/color of line parameterized.",
    "code": ""
  }
]*/