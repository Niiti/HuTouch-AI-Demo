/*[
  {
    "path": "lib\\main.dart",
    "description": "App entry and theme configuration; ensure routing and theming include the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/routes/app_pages.dart';\nimport 'package:build_me_up/core/routes/app_routes.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\n\nvoid main() {\n  runApp(const build_me_upApp());\n}\n\nclass build_me_upApp extends StatelessWidget {\n  const build_me_upApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return GetMaterialApp(\n      title: AppStrings.appTitle,\n      debugShowCheckedModeBanner: false,\n      initialRoute: AppRoutes.one,\n      getPages: AppPages.pages,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: AppColors.brand),\n        scaffoldBackgroundColor: AppColors.background,\n        useMaterial3: true,\n        textTheme: const TextTheme(\n          bodyLarge: TextStyle(color: AppColors.textPrimary),\n          bodyMedium: TextStyle(color: AppColors.textPrimary),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_colors.dart",
    "description": "Centralized color palette; extend or adjust colors used to theme the new next screen.",
    "content": "import 'package:flutter/material.dart';\n\nclass AppColors {\n  static const background = Colors.white;\n  static const brand = Color(0xFF396764);\n  static const textPrimary = Color(0xFF0B0B0B);\n  static const textOnPrimary = Colors.white;\n  static const outline = Color(0xFF396764);\n  static const primaryButton = Color(0xFF426764);\n\n  // New additions merged from NEW:\n  static const link = Color(0xFF396764);\n  static const inputFill = Color(0xFFE8E8E8);\n  static const primary = brand;\n  static const Color textDark = Color(0xFF354443);\n  static const Color subtleText = Color(0xFF9E9E9E);\n  static const Color accentGreen = Color(0xFFD9EFDC);\n  static const Color ringGreen = Color(0xFF9CDBA6);\n  static const Color divider = Color(0xFFE0E0E0);\n  static const Color warning = Color(0xFFFF2E00);\n  static const Color streakYellow = Color(0xFFFAFF00);\n  static const Color navShadow = Color(0xFFC1C1C1);\n\n  // rest of the code\n  static const Color primaryText = Color(0xFF354443);\n  static const Color banner = Color(0xFFD9EFDC);\n  static const Color surface = Color(0xFFEBEBEB);\n  static const Color muted = Color(0xFF9E9E9E);\n  static const Color white = Colors.white;\n  static const Color black = Colors.black;\n\n  // New additions merged from NEW files for UI parity:\n  static const Color darkText = textDark;\n  static const Color mintSurface = accentGreen;\n  static const Color lightMint = ringGreen;\n  static const Color plusBtn = brand;\n  static const Color plusIcon = Colors.white;\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_images.dart",
    "description": "Asset path constants; add image references required by the next screen.",
    "content": "class AppImages {\n  static const base = 'assets';\n  static const logo05 = '$base/logo_05.png';\n  // New additions merged from NEW:\n  static const google = '$base/google.png';\n  static const apple = '$base/apple.png';\n  static const facebook = '$base/facebook.png';\n  static const String chiaPuddingA = '$base/chia_seed_pudding.png';\n  static const String chiaPuddingB = '$base/chia_seed_pudding-1.png';\n  static const String chiaPuddingAlt = '$base/chia_seed_pudding_alternate.png';\n  static const String quesadilla = '$base/quesadilla_with_salsa.png';\n\n  // rest of the code\n  static const String scrambledEggsOnToast =\n      '$base/scrambled_eggs_on_toast.png';\n  static const String slicedBread = '$base/sliced_bread.png';\n\n  static const String happyGreenApple = '$base/happy_green_apple.png';\n\n  // New additions merged from NEW:\n  static const String fishAndChipsWithPeas =\n      '$base/fish_and_chips_with_peas.png';\n}\n"
  },
  {
    "path": "lib\\core\\routes\\app_pages.dart",
    "description": "GetX route registry; add a new GetPage entry to navigate to the next screen.",
    "content": "import 'package:get/get.dart';\nimport 'package:build_me_up/modules/one/views/one_view.dart';\nimport 'package:build_me_up/modules/sign_in/views/sign_in_view.dart';\nimport 'package:build_me_up/modules/sign_up/views/sign_up_view.dart';\nimport 'package:build_me_up/core/routes/app_routes.dart';\nimport 'package:build_me_up/modules/navigation/combined_screens.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/views/daily_challenge_home_view.dart';\nimport 'package:build_me_up/modules/days_overview/views/days_overview_view.dart';\nimport 'package:build_me_up/modules/profile/views/profile_view.dart';\nimport 'package:build_me_up/modules/recipes_list/views/recipes_list_view.dart';\nimport 'package:build_me_up/modules/celebration_success/controllers/celebration_success_controller.dart';\nimport 'package:build_me_up/modules/celebration_success/views/celebration_success_view.dart';\n\nclass AppPages {\n  static final pages = <GetPage>[\n    GetPage(\n      name: AppRoutes.one,\n      page: () => const OneView(),\n      participatesInRootNavigator: true,\n    ),\n    GetPage(name: AppRoutes.signIn, page: () => const SignInView()),\n    GetPage(name: AppRoutes.signUp, page: () => const SignUpView()),\n\n    // New additions merged from NEW:\n    GetPage(name: AppRoutes.home, page: () => const CombinedScreens()),\n    GetPage(name: AppRoutes.profile, page: () => const ProfileView()),\n    GetPage(name: AppRoutes.days, page: () => const DaysOverviewView()),\n    GetPage(name: AppRoutes.recipes, page: () => const RecipesListView()),\n    GetPage(name: '/daily-home', page: () => const DailyChallengeHomeView()),\n    GetPage<CelebrationSuccessController>(\n      name: AppRoutes.celebrationSuccess,\n      page: () => const CelebrationSuccessView(),\n      binding: BindingsBuilder.put(() => CelebrationSuccessController()),\n    ),\n  ];\n}\n"
  },
  {
    "path": "lib\\core\\routes\\app_routes.dart",
    "description": "Defines route name constants; add a route key for the next screen.",
    "content": "class AppRoutes {\n  static const one = '/';\n  static const signIn = '/sign-in';\n  static const signUp = '/sign-up';\n\n  // New additions merged from NEW:\n  static const home = '/home';\n  static const profile = '/profile';\n  static const days = '/days';\n  static const recipes = '/recipes';\n  static const mealList = '/meal-list';\n  static const celebrationSuccess = '/celebration-success';\n}\n"
  },
  {
    "path": "lib\\widgets\\buttons\\build_me_up_buttons.dart",
    "description": "Reusable PrimaryButton component; use for navigation or actions on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_durations.dart';\n\nenum PrimaryButtonVariant { filled, outlined }\n\nclass PrimaryButton extends StatelessWidget {\n  final String text;\n  final VoidCallback onPressed;\n  final bool enabled;\n  final double height;\n  final BorderRadius borderRadius;\n  final Widget? icon;\n  final TextStyle? textStyle;\n  final PrimaryButtonVariant variant;\n\n  const PrimaryButton({\n    super.key,\n    required this.text,\n    required this.onPressed,\n    required this.height,\n    required this.borderRadius,\n    this.enabled = true,\n    this.icon,\n    this.textStyle,\n    this.variant = PrimaryButtonVariant.filled,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final bgColor = variant == PrimaryButtonVariant.filled ? AppColors.primaryButton : Colors.transparent;\n    final fgColor = variant == PrimaryButtonVariant.filled ? AppColors.textOnPrimary : AppColors.primaryButton;\n    final borderSide = variant == PrimaryButtonVariant.outlined\n        ? BorderSide(color: AppColors.primaryButton, width: 1.5)\n        : BorderSide.none;\n\n    final effectiveTextStyle = (textStyle ?? TextStyle(fontWeight: FontWeight.w600, fontSize: height * 0.45)).copyWith(color: fgColor);\n\n    return Opacity(\n      opacity: enabled ? 1.0 : 0.6,\n      child: Material(\n        clipBehavior: Clip.antiAlias,\n        color: bgColor,\n        shape: RoundedRectangleBorder(borderRadius: borderRadius, side: borderSide),\n        child: InkWell(\n          onTap: enabled ? onPressed : null,\n          child: AnimatedContainer(\n            duration: AppDurations.short,\n            height: height,\n            padding: const EdgeInsets.symmetric(horizontal: 16),\n            alignment: Alignment.center,\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                if (icon != null) ...[\n                  icon!,\n                  const SizedBox(width: 8),\n                ],\n                Flexible(\n                  child: Text(\n                    text,\n                    maxLines: 1,\n                    overflow: TextOverflow.ellipsis,\n                    textAlign: TextAlign.center,\n                    style: effectiveTextStyle,\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\one\\controllers\\one_controller.dart",
    "description": "GetX controller handling navigation; add a method to navigate to the next screen.",
    "content": "import 'package:get/get.dart';\nimport 'package:build_me_up/core/routes/app_routes.dart';\n\nclass OneController extends GetxController {\n  void onTapSignIn() {\n    Get.toNamed(AppRoutes.signIn);\n  }\n\n  void onTapSignUp() {\n    Get.toNamed(AppRoutes.signUp);\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\one\\views\\one_view.dart",
    "description": "Landing screen composition; add a button or link to push the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_dimensions.dart';\nimport 'package:build_me_up/core/constants/app_images.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart' as cx;\nimport 'package:build_me_up/modules/one/controllers/one_controller.dart';\nimport 'package:build_me_up/widgets/buttons/build_me_up_buttons.dart';\n\nclass OneView extends GetView<OneController> {\n  const OneView({super.key});\n\n  @override\n  OneController get controller => Get.put(OneController());\n\n  @override\n  Widget build(BuildContext context) {\n    final isPortrait = cx.ContextExtensionss(context).isPortrait;\n\n    final h = context.screenHeight;\n    final w = context.screenWidth;\n\n    final horizontalPadding = w * AppDimensions.contentHPadPct;\n\n    final buttonHeight = h * AppDimensions.buttonHeightPct;\n    final buttonRadius = Radius.circular(\n      h * AppDimensions.buttonRadiusPctOfHeight,\n    );\n\n    final topSpacer = SizedBox(height: h * AppDimensions.logoTopSpacerPct);\n    final logo = FractionallySizedBox(\n      widthFactor: AppDimensions.logoWidthFactor,\n      child: ConstrainedBox(\n        constraints: BoxConstraints(\n          maxHeight: h * AppDimensions.logoMaxHeightPct,\n        ),\n        child: FittedBox(\n          fit: BoxFit.contain,\n          child: Image.asset(AppImages.logo05),\n        ),\n      ),\n    );\n\n    final title = Text(\n      AppStrings.buildMeUp,\n      textAlign: TextAlign.center,\n      style: TextStyle(\n        color: AppColors.brand,\n        fontWeight: FontWeight.w700,\n        fontSize: h * AppDimensions.titleFontPctOfH,\n        height: 1.2,\n      ),\n    );\n\n    final gapAfterTitle = SizedBox(\n      height: h * AppDimensions.textToButtonsTopGapPct,\n    );\n    final gapBetweenButtons = SizedBox(\n      height: h * AppDimensions.betweenButtonsGapPct,\n    );\n\n    final content = Padding(\n      padding: EdgeInsets.fromLTRB(\n        horizontalPadding,\n        0,\n        horizontalPadding,\n        h * 0.02,\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: [\n          topSpacer,\n          logo,\n          title,\n          gapAfterTitle,\n          FractionallySizedBox(\n            widthFactor: AppDimensions.buttonWidthFactor,\n            child: PrimaryButton(\n              text: AppStrings.signIn,\n              onPressed: controller.onTapSignIn,\n              enabled: true,\n              height: buttonHeight,\n              borderRadius: BorderRadius.all(buttonRadius),\n              variant: PrimaryButtonVariant.filled,\n              textStyle: TextStyle(\n                fontWeight: FontWeight.w500,\n                fontSize: h * 0.023758,\n              ),\n            ),\n          ),\n          gapBetweenButtons,\n          FractionallySizedBox(\n            widthFactor: AppDimensions.buttonWidthFactor,\n            child: PrimaryButton(\n              text: AppStrings.signUp,\n              onPressed: controller.onTapSignUp,\n              enabled: true,\n              height: buttonHeight,\n              borderRadius: BorderRadius.all(buttonRadius),\n              variant: PrimaryButtonVariant.outlined,\n              textStyle: TextStyle(\n                fontWeight: FontWeight.w500,\n                fontSize: h * 0.023758,\n              ),\n            ),\n          ),\n          if (!isPortrait) SizedBox(height: h * 0.02),\n        ],\n      ),\n    );\n\n    final mustScroll = h < 600 || ContextExtensionss(context).isLandscape;\n\n    return Scaffold(\n      body: SafeArea(\n        child:\n            mustScroll\n                ? Scrollbar(\n                  child: SingleChildScrollView(\n                    padding: EdgeInsets.zero,\n                    child: content,\n                  ),\n                )\n                : content,\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\shared\\components\\input-text-field.dart",
    "description": "Reusable text input; use in forms on the next screen for consistency.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\n\nclass InputTextField extends StatelessWidget {\n  const InputTextField({\n    super.key,\n    required this.height,\n    required this.hintText,\n    this.controller,\n    this.keyboardType,\n    this.textInputAction,\n    this.obscureText = false,\n  });\n\n  final double height;\n  final String hintText;\n  final TextEditingController? controller;\n  final TextInputType? keyboardType;\n  final TextInputAction? textInputAction;\n  final bool obscureText;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: AppColors.inputFill,\n      borderRadius: BorderRadius.circular(height * 0.5),\n      child: SizedBox(\n        height: height,\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 16),\n          child: Center(\n            child: TextFormField(\n              controller: controller,\n              keyboardType: keyboardType,\n              textInputAction: textInputAction,\n              obscureText: obscureText,\n              decoration: InputDecoration(\n                hintText: hintText,\n                hintStyle: TextStyle(\n                  color: AppColors.textPrimary,\n                  fontWeight: FontWeight.w500,\n                  fontSize: height * 0.36,\n                ),\n                border: InputBorder.none,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\sign_in\\controllers\\sign_in_controller.dart",
    "description": "GetX controller scaffold; extend to manage state and navigation for the next screen.",
    "content": "import 'package:get/get.dart';\n\nclass SignInController extends GetxController {}\n"
  },
  {
    "path": "lib\\modules\\sign_in\\views\\sign_in_view.dart",
    "description": "Presentation screen; add navigation button or route to the next screen.",
    "content": "import 'package:flutter/material.dart';\n\nclass SignInView extends StatelessWidget {\n  const SignInView({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(\n      body: SafeArea(child: Center(child: Text('Sign In Screen'))),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\sign_up\\controllers\\sign_up_controller.dart",
    "description": "Orchestrates sign-up flow; add next-step navigation after success.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/services/auth/repositories/i_auth_repository.dart';\nimport 'package:build_me_up/utils/error/app_exception.dart';\nimport 'package:build_me_up/utils/error/error_mapper.dart';\n\nclass SignUpController extends GetxController {\n  SignUpController(this._repository);\n  final IAuthRepository _repository;\n\n  final formKey = GlobalKey<FormState>();\n  final nameCtrl = TextEditingController();\n  final emailCtrl = TextEditingController();\n  final passwordCtrl = TextEditingController();\n\n  final isLoading = false.obs;\n  final errorMessage = RxnString();\n  final canSubmit = false.obs;\n\n  @override\n  void onInit() {\n    super.onInit();\n    nameCtrl.addListener(_onChanged);\n    emailCtrl.addListener(_onChanged);\n    passwordCtrl.addListener(_onChanged);\n  }\n\n  void _onChanged() {\n    final ok =\n        nameCtrl.text.trim().isNotEmpty &&\n        _isValidEmail(emailCtrl.text.trim()) &&\n        passwordCtrl.text.length >= 6;\n    canSubmit.value = ok;\n  }\n\n  String? validateName(String? v) {\n    if (v == null || v.trim().isEmpty) return AppStrings.fieldRequired;\n    return null;\n  }\n\n  String? validateEmail(String? v) {\n    final value = v?.trim() ?? '';\n    if (value.isEmpty) return AppStrings.fieldRequired;\n    if (!_isValidEmail(value)) return AppStrings.emailInvalid;\n    return null;\n  }\n\n  String? validatePassword(String? v) {\n    final value = v ?? '';\n    if (value.isEmpty) return AppStrings.fieldRequired;\n    if (value.length < 6) return AppStrings.passwordInvalid;\n    return null;\n  }\n\n  bool _isValidEmail(String email) {\n    final r = RegExp(r'^[\\w\\.\\-]+@([\\w\\-]+\\.)+[a-zA-Z]{2,}$');\n    return r.hasMatch(email);\n  }\n\n  Future<void> onSignUpPressed() async {\n    FocusManager.instance.primaryFocus?.unfocus();\n    if (!(formKey.currentState?.validate() ?? false)) return;\n    isLoading.value = true;\n    errorMessage.value = null;\n    try {\n      await _repository.register(\n        name: nameCtrl.text.trim(),\n        email: emailCtrl.text.trim(),\n        password: passwordCtrl.text,\n      );\n      Get.snackbar(\n        'Success',\n        'Account created successfully',\n        snackPosition: SnackPosition.BOTTOM,\n      );\n    } on AppException catch (e) {\n      errorMessage.value = ErrorMapper.messageFromException(e);\n      Get.snackbar(\n        'Error',\n        errorMessage.value ?? AppStrings.somethingWentWrong,\n        snackPosition: SnackPosition.BOTTOM,\n      );\n    } catch (_) {\n      errorMessage.value = AppStrings.somethingWentWrong;\n      Get.snackbar(\n        'Error',\n        errorMessage.value!,\n        snackPosition: SnackPosition.BOTTOM,\n      );\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  Future<void> onGooglePressed() async {\n    Get.snackbar(\n      'Google',\n      'Sign up with Google',\n      snackPosition: SnackPosition.BOTTOM,\n    );\n  }\n\n  Future<void> onApplePressed() async {\n    Get.snackbar(\n      'Apple',\n      'Sign up with Apple',\n      snackPosition: SnackPosition.BOTTOM,\n    );\n  }\n\n  Future<void> onFacebookPressed() async {\n    Get.snackbar(\n      'Facebook',\n      'Sign up with Facebook',\n      snackPosition: SnackPosition.BOTTOM,\n    );\n  }\n\n  void onSignInNav() {\n    Get.toNamed('/sign-in');\n  }\n\n  @override\n  void onClose() {\n    nameCtrl.dispose();\n    emailCtrl.dispose();\n    passwordCtrl.dispose();\n    super.onClose();\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\sign_up\\views\\sign_up_view.dart",
    "description": "UI composition for sign up; wire actions to navigate to the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_images.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/constants/app_dimensions.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart' as cx;\nimport 'package:build_me_up/modules/sign_up/controllers/sign_up_controller.dart';\nimport 'package:build_me_up/services/auth/data_sources/auth_remote_data_source_impl.dart';\nimport 'package:build_me_up/services/auth/repositories/auth_repository_impl.dart';\nimport 'package:build_me_up/shared/components/input-text-field.dart';\nimport 'package:build_me_up/widgets/buttons/build_me_up_buttons.dart';\n\nclass SignUpView extends GetView<SignUpController> {\n  const SignUpView({super.key});\n\n  @override\n  SignUpController get controller =>\n      Get.put(SignUpController(AuthRepositoryImpl(AuthRemoteDataSourceImpl())));\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.screenHeight;\n    final w = context.screenWidth;\n    final isPortrait = cx.ContextExtensionss(context).isPortrait;\n\n    final horizontalPadding = w * AppDimensions.contentHPadPct;\n    final inputHeight = h * AppDimensions.buttonHeightPct;\n    final buttonHeight = h * AppDimensions.buttonHeightPct;\n    final buttonRadius = Radius.circular(\n      h * AppDimensions.buttonRadiusPctOfHeight,\n    );\n\n    final content = Padding(\n      padding: EdgeInsets.symmetric(horizontal: horizontalPadding),\n      child: Column(\n        children: [\n          SizedBox(height: h * AppDimensions.logoTopSpacerPct),\n          Text(\n            AppStrings.createAccount,\n            textAlign: TextAlign.center,\n            style: TextStyle(\n              color: AppColors.brand,\n              fontWeight: FontWeight.w700,\n              fontSize: h * AppDimensions.titleFontPctOfH,\n            ),\n          ),\n          SizedBox(height: h * 0.012),\n          Text(\n            AppStrings.startJourney,\n            textAlign: TextAlign.center,\n            style: TextStyle(\n              color: AppColors.textPrimary,\n              fontSize: h * 0.023758,\n            ),\n          ),\n          SizedBox(height: h * 0.04),\n          Form(\n            key: controller.formKey,\n            child: Column(\n              children: [\n                FractionallySizedBox(\n                  widthFactor: AppDimensions.buttonWidthFactor,\n                  child: InputTextField(\n                    height: inputHeight,\n                    hintText: AppStrings.name,\n                    controller: controller.nameCtrl,\n                  ),\n                ),\n                SizedBox(height: h * 0.02),\n                FractionallySizedBox(\n                  widthFactor: AppDimensions.buttonWidthFactor,\n                  child: InputTextField(\n                    height: inputHeight,\n                    hintText: AppStrings.email,\n                    controller: controller.emailCtrl,\n                    keyboardType: TextInputType.emailAddress,\n                  ),\n                ),\n                SizedBox(height: h * 0.02),\n                FractionallySizedBox(\n                  widthFactor: AppDimensions.buttonWidthFactor,\n                  child: InputTextField(\n                    height: inputHeight,\n                    hintText: AppStrings.password,\n                    controller: controller.passwordCtrl,\n                    obscureText: true,\n                  ),\n                ),\n              ],\n            ),\n          ),\n          SizedBox(height: h * 0.04),\n          Obx(\n            () => FractionallySizedBox(\n              widthFactor: AppDimensions.buttonWidthFactor,\n              child: PrimaryButton(\n                text: AppStrings.signUp,\n                onPressed: controller.onSignUpPressed,\n                enabled:\n                    controller.canSubmit.value && !controller.isLoading.value,\n                height: buttonHeight,\n                borderRadius: BorderRadius.all(buttonRadius),\n                textStyle: TextStyle(\n                  fontWeight: FontWeight.w500,\n                  fontSize: h * 0.023758,\n                ),\n              ),\n            ),\n          ),\n          SizedBox(height: h * 0.02),\n          Text(\n            AppStrings.orSignUp,\n            style: TextStyle(\n              fontSize: h * 0.017278,\n              color: AppColors.textPrimary,\n            ),\n          ),\n          SizedBox(height: h * 0.02),\n          Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              _SocialIcon(\n                path: AppImages.google,\n                onTap: controller.onGooglePressed,\n              ),\n              SizedBox(width: w * 0.08),\n              _SocialIcon(\n                path: AppImages.apple,\n                onTap: controller.onApplePressed,\n              ),\n              SizedBox(width: w * 0.08),\n              _SocialIcon(\n                path: AppImages.facebook,\n                onTap: controller.onFacebookPressed,\n              ),\n            ],\n          ),\n          SizedBox(height: h * 0.06),\n          Wrap(\n            alignment: WrapAlignment.center,\n            crossAxisAlignment: WrapCrossAlignment.center,\n            children: [\n              Text(\n                AppStrings.haveAccount,\n                style: TextStyle(\n                  fontSize: h * 0.017278,\n                  fontWeight: FontWeight.w500,\n                  color: AppColors.textPrimary,\n                ),\n              ),\n              Material(\n                color: Colors.transparent,\n                child: InkWell(\n                  onTap: controller.onSignInNav,\n                  child: Padding(\n                    padding: EdgeInsets.symmetric(\n                      horizontal: w * 0.005,\n                      vertical: h * 0.004,\n                    ),\n                    child: Text(\n                      AppStrings.signIn,\n                      style: TextStyle(\n                        fontSize: h * 0.017278,\n                        fontWeight: FontWeight.w600,\n                        color: AppColors.link,\n                        decoration: TextDecoration.underline,\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n          if (!isPortrait) SizedBox(height: h * 0.02),\n        ],\n      ),\n    );\n\n    final mustScroll = h < 640 || ContextExtensionss(context).isLandscape;\n\n    return Scaffold(\n      body: SafeArea(\n        child:\n            mustScroll\n                ? Scrollbar(\n                  child: SingleChildScrollView(\n                    padding: EdgeInsets.zero,\n                    child: content,\n                  ),\n                )\n                : content,\n      ),\n    );\n  }\n}\n\nclass _SocialIcon extends StatelessWidget {\n  const _SocialIcon({required this.path, required this.onTap});\n  final String path;\n  final VoidCallback onTap;\n\n  @override\n  Widget build(BuildContext context) {\n    final size = context.screenHeight * 0.0367;\n    final r = BorderRadius.circular(size);\n    return Material(\n      clipBehavior: Clip.antiAlias,\n      borderRadius: r,\n      color: Colors.transparent,\n      child: InkWell(\n        onTap: onTap,\n        borderRadius: r,\n        child: Padding(\n          padding: EdgeInsets.all(size * 0.25),\n          child: Image.asset(\n            path,\n            width: size,\n            height: size,\n            color: AppColors.brand,\n            fit: BoxFit.contain,\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\services\\auth\\data_sources\\auth_remote_data_source_impl.dart",
    "description": "Implements remote auth calls; extend to support network ops used by the next screen.",
    "content": "import 'dart:async';\nimport 'package:build_me_up/core/constants/app_durations.dart';\nimport 'package:build_me_up/services/auth/data_sources/i_auth_remote_data_source.dart';\nimport 'package:build_me_up/utils/error/app_exception.dart';\n\nclass AuthRemoteDataSourceImpl implements IAuthRemoteDataSource {\n  @override\n  Future<void> register({required String name, required String email, required String password}) async {\n    await Future<void>.delayed(AppDurations.networkSimulated);\n    if (email.toLowerCase().contains('error')) {\n      throw NetworkException('Email not allowed');\n    }\n  }\n}"
  },
  {
    "path": "lib\\services\\auth\\data_sources\\i_auth_remote_data_source.dart",
    "description": "Defines remote API contract; add methods needed by the next screen.",
    "content": "abstract class IAuthRemoteDataSource {\n  Future<void> register({required String name, required String email, required String password});\n}"
  },
  {
    "path": "lib\\services\\auth\\repositories\\auth_repository_impl.dart",
    "description": "Wires data sources to domain methods; expose operations the next screen will consume.",
    "content": "import 'package:build_me_up/services/auth/data_sources/i_auth_remote_data_source.dart';\nimport 'package:build_me_up/services/auth/repositories/i_auth_repository.dart';\n\nclass AuthRepositoryImpl implements IAuthRepository {\n  AuthRepositoryImpl(this._remote);\n  final IAuthRemoteDataSource _remote;\n\n  @override\n  Future<void> register({required String name, required String email, required String password}) {\n    return _remote.register(name: name, email: email, password: password);\n  }\n}"
  },
  {
    "path": "lib\\services\\auth\\repositories\\i_auth_repository.dart",
    "description": "Repository interface for domain actions; add use cases for the next screen.",
    "content": "abstract class IAuthRepository {\n  Future<void> register({required String name, required String email, required String password});\n}"
  },
  {
    "path": "lib\\core\\constants\\app_strings.dart",
    "description": "Add new UI text and labels needed by the next screen",
    "content": "class AppStrings {\n  static const appTitle = 'build_me_up';\n  static const buildMeUp = 'Build me Up';\n  static const signIn = 'Sign In';\n  static const signUp = 'Sign Up';\n  static const String hello = 'Hello!';\n  static const String userName = 'Sophia';\n  static const String todaysChallenge = 'Today’s Challenge: 7th Day';\n  static const String target = 'Target';\n  static const String targetKcal = '1700 Kcal';\n  static const String start = 'Start';\n  static const String last6Days = 'Last 6 Days';\n  static const String recipes = 'Recipes';\n  static const String seeMore = 'See More';\n  static const String fat = 'Fat';\n  static const String protein = 'Protein';\n  static const String home = 'Home';\n  static const String challenge = 'Challenge';\n  static const String recipesTab = 'Recipes';\n  static const String profile = 'Profile';\n  static const String daysOverview = 'Days Overview';\n  static const String recipesList = 'Recipes List';\n  static const String createAccount = '';\n  static const String startJourney = \"Start your journey with us\";\n  static const String orSignUp = \"Or sign up with\";\n  static const String haveAccount = \"Already have an account?\";\n  static const String name = \"Name\";\n  static const String email = \"Email\";\n  static const String password = \"Password\";\n  static const String fieldRequired = \"This field is required\";\n  static const String emailInvalid = \"Please enter a valid email address\";\n  static const String passwordInvalid =\n      \"Password must be at least 6 characters\";\n  static const String somethingWentWrong =\n      \"Something went wrong. Please try again.\";\n  static const String breakfast = 'Breakfast';\n  static const String caloriesSuffix = 'Cal';\n  static const String add = 'Add';\n  static const String takeAnotherPhoto = 'Take another photo';\n  static const String search = 'Search';\n  static const String snackbarAdded = 'Items added to your meal';\n  static const String snackbarPhoto = 'Launching camera...';\n  static const String snackbarSoon = 'This section will be available soon.';\n  static const String errorGeneric = 'Something went wrong. Please try again.';\n\n  // New additions merged from NEW files for UI parity:\n  static const String kcal = 'Kcal';\n  static const String cal = 'Cal';\n}\n"
  },
  {
    "path": "lib\\modules\\navigation\\combined_screens.dart",
    "description": "Bottom navigation and screen composition; add a tab or navigation flow for the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/views/daily_challenge_home_view.dart';\nimport 'package:build_me_up/modules/meal_capture_review/views/meal_capture_review_view.dart';\n\nclass CombinedScreens extends StatefulWidget {\n  const CombinedScreens({super.key});\n\n  @override\n  State<CombinedScreens> createState() => _CombinedScreensState();\n}\n\nclass _CombinedScreensState extends State<CombinedScreens> {\n  int _index = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    final navHeight = context.heightUnit * 10.0;\n\n    return Scaffold(\n      body: const SafeArea(child: DailyChallengeHomeView()),\n      bottomNavigationBar: Container(\n        decoration: const BoxDecoration(\n          color: Colors.white,\n          boxShadow: [\n            BoxShadow(\n              color: AppColors.navShadow,\n              offset: Offset(0, -1),\n              blurRadius: 5,\n            ),\n          ],\n        ),\n        child: NavigationBar(\n          height: navHeight,\n          selectedIndex: _index,\n          destinations: const [\n            NavigationDestination(\n              icon: Icon(Icons.home_filled),\n              label: AppStrings.home,\n            ),\n            NavigationDestination(\n              icon: Icon(Icons.local_fire_department),\n              label: AppStrings.challenge,\n            ),\n            NavigationDestination(\n              icon: Icon(Icons.restaurant_menu),\n              label: AppStrings.recipesTab,\n            ),\n          ],\n          onDestinationSelected: (i) {\n            if (i == 0) {\n              setState(() => _index = 0);\n            } else if (i == 1) {\n              Get.to(() => const MealCaptureReviewView());\n            } else {\n              Get.showSnackbar(\n                const GetSnackBar(\n                  message: 'This section will be available soon.',\n                  duration: Duration(seconds: 2),\n                ),\n              );\n            }\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\shared\\components\\user-avatar-icon-button.dart",
    "description": "Common avatar action button reusable in the next screen's app bar",
    "content": "import 'package:flutter/material.dart';\n\nclass UserAvatarIconButton extends StatelessWidget {\n  const UserAvatarIconButton({\n    super.key,\n    required this.onTap,\n    this.size = 40,\n    this.backgroundColor = const Color(0xFF426764),\n    this.iconColor = Colors.white,\n    this.imageProvider,\n  });\n\n  final VoidCallback onTap;\n  final double size;\n  final Color backgroundColor;\n  final Color iconColor;\n  final ImageProvider? imageProvider;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: backgroundColor,\n      shape: const CircleBorder(),\n      clipBehavior: Clip.antiAlias,\n      child: InkWell(\n        onTap: onTap,\n        child: SizedBox(\n          width: size,\n          height: size,\n          child: imageProvider != null\n              ? Ink.image(image: imageProvider!, fit: BoxFit.cover)\n              : Icon(Icons.person, color: iconColor, size: size * 0.55),\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\recipe_card.dart",
    "description": "Reusable card UI component suitable for listing items on the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass RecipeCard extends StatelessWidget {\n  const RecipeCard({\n    super.key,\n    required this.title,\n    required this.kcal,\n    required this.asset,\n    this.onTap,\n  });\n\n  final String title;\n  final int kcal;\n  final String asset;\n  final VoidCallback? onTap;\n\n  @override\n  Widget build(BuildContext context) {\n    final radius = BorderRadius.circular(context.heightUnit * 1.2);\n    final cardWidth = context.widthUnit * 44.0;\n    final imageHeight = context.heightUnit * 12.5;\n\n    return SizedBox(\n      width: cardWidth,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          Material(\n            color: AppColors.accentGreen,\n            borderRadius: radius,\n            child: InkWell(\n              onTap: onTap,\n              child: Container(\n                decoration: BoxDecoration(\n                  color: AppColors.accentGreen,\n                  borderRadius: radius,\n                ),\n                padding: EdgeInsets.all(context.widthUnit * 3.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    ClipRRect(\n                      borderRadius: BorderRadius.circular(context.heightUnit * 1.0),\n                      child: SizedBox(\n                        height: imageHeight,\n                        child: Image.asset(\n                          asset,\n                          fit: BoxFit.cover,\n                        ),\n                      ),\n                    ),\n                    SizedBox(height: context.heightUnit * 1.5),\n                    Text(\n                      title,\n                      maxLines: 1,\n                      overflow: TextOverflow.ellipsis,\n                      style: TextStyle(\n                        color: AppColors.textDark,\n                        fontWeight: FontWeight.w700,\n                        fontSize: context.heightUnit * 1.6,\n                      ),\n                    ),\n                    SizedBox(height: context.heightUnit * 0.6),\n                    Text(\n                      '\u001b[0m$kcal Kcal',\n                      style: TextStyle(\n                        color: AppColors.textDark,\n                        fontWeight: FontWeight.w400,\n                        fontSize: context.heightUnit * 1.4,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\sections_header.dart",
    "description": "Reusable section header with See More action usable on the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass SectionsHeader extends StatelessWidget {\n  const SectionsHeader({\n    super.key,\n    required this.title,\n    required this.onSeeMore,\n  });\n\n  final String title;\n  final VoidCallback onSeeMore;\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Expanded(\n          child: Text(\n            title,\n            style: TextStyle(\n              color: AppColors.textDark,\n              fontWeight: FontWeight.w700,\n              fontSize: context.heightUnit * 2.0,\n            ),\n          ),\n        ),\n        Material(\n          color: Colors.transparent,\n          clipBehavior: Clip.antiAlias,\n          child: InkWell(\n            onTap: onSeeMore,\n            child: Padding(\n              padding: EdgeInsets.symmetric(\n                horizontal: context.widthUnit * 2.5,\n                vertical: context.heightUnit * 0.5,\n              ),\n              child: Text(\n                AppStrings.seeMore,\n                style: TextStyle(\n                  color: AppColors.primary,\n                  fontWeight: FontWeight.w700,\n                  fontSize: context.heightUnit * 1.6,\n                ),\n              ),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}"
  },
  {
    "path": "lib\\shared\\components\\header-section-panel.dart",
    "description": "Reusable section header panel to keep consistent styling on the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass HeaderSectionPanel extends StatelessWidget {\n  final double height;\n  final Color backgroundColor;\n  final String title;\n  final String? subtitle;\n  final Color textColor;\n  final Widget? trailing;\n\n  const HeaderSectionPanel({\n    super.key,\n    required this.height,\n    required this.backgroundColor,\n    required this.title,\n    this.subtitle,\n    this.textColor = const Color(0xFF354443),\n    this.trailing,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final radius = BorderRadius.circular(context.heightUnit * 2.0);\n    return Container(\n      height: height,\n      width: double.infinity,\n      decoration: BoxDecoration(\n        color: backgroundColor,\n        borderRadius: radius,\n      ),\n      alignment: Alignment.center,\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Text(\n            title,\n            textAlign: TextAlign.center,\n            style: TextStyle(\n              fontSize: context.heightUnit * 2.6,\n              fontWeight: FontWeight.w700,\n              color: textColor,\n            ),\n          ),\n          if (subtitle != null) ...[\n            SizedBox(height: context.heightUnit * 0.8),\n            Text(\n              subtitle!,\n              style: TextStyle(\n                fontSize: context.heightUnit * 2.0,\n                fontWeight: FontWeight.w400,\n                color: textColor,\n              ),\n            ),\n          ],\n          if (trailing != null) trailing!,\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\controllers\\meal_capture_review_controller.dart",
    "description": "GetX controller for meal review; implement next action to route to the next screen.",
    "content": "import 'dart:math';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_images.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/modules/meal_capture_review/models/food_item.dart';\n\nclass MealCaptureReviewController extends GetxController {\n  final RxString mealName = 'Breakfast'.obs;\n  final RxInt consumedCalories = 0.obs;\n  final RxInt totalCalories = 500.obs;\n\n  final RxString photoAsset = 'assets/images/scrambled_eggs_on_toast.png'.obs;\n\n  final List<String> gallery = const [\n    'assets/images/scrambled_eggs_on_toast.png',\n    'assets/images/quesadilla_with_salsa.png',\n    'assets/images/chia_seed_pudding.png',\n    'assets/images/chia_seed_pudding-1.png',\n    'assets/images/chia_seed_pudding_alternate.png',\n  ];\n\n  // rest of the code\n  final RxList<FoodItem> allItems = <FoodItem>[].obs;\n  final RxList<FoodItem> filteredItems = <FoodItem>[].obs;\n  final RxBool showSearch = false.obs;\n  final RxString query = ''.obs;\n  final RxBool isAdding = false.obs;\n  void goNext() {\n    Get.snackbar('Next', 'Proceeding to next step');\n  }\n\n  @override\n  void onInit() {\n    super.onInit();\n    allItems.assignAll(const [\n      FoodItem(\n        id: 'eggs',\n        name: 'Scrambled Eggs',\n        caloriesPerServing: 100,\n        assetPath: AppImages.scrambledEggsOnToast,\n      ),\n      FoodItem(\n        id: 'bread',\n        name: 'Bread',\n        caloriesPerServing: 50,\n        assetPath: AppImages.slicedBread,\n      ),\n    ]);\n    filteredItems.assignAll(allItems);\n    ever<List<FoodItem>>(allItems, (_) => _recalcConsumed());\n  }\n\n  void _recalcConsumed() {\n    consumedCalories.value = allItems.fold(\n      0,\n      (acc, e) => acc + (e.caloriesPerServing * e.qty),\n    );\n  }\n\n  void increment(String id) {\n    final idx = allItems.indexWhere((e) => e.id == id);\n    if (idx == -1) return;\n    final item = allItems[idx];\n    allItems[idx] = item.copyWith(qty: item.qty + 1);\n    _recalcConsumed();\n  }\n\n  void decrement(String id) {\n    final idx = allItems.indexWhere((e) => e.id == id);\n    if (idx == -1) return;\n    final item = allItems[idx];\n    final next = (item.qty - 1).clamp(0, 999);\n    allItems[idx] = item.copyWith(qty: next);\n    _recalcConsumed();\n  }\n\n  void toggleSearch() {\n    showSearch.toggle();\n    if (!showSearch.value) clearSearch();\n  }\n\n  void onQueryChanged(String value) {\n    query.value = value;\n    final q = value.trim().toLowerCase();\n    if (q.isEmpty) {\n      filteredItems.assignAll(allItems);\n      return;\n    }\n    filteredItems.assignAll(\n      allItems.where((f) => f.name.toLowerCase().contains(q)),\n    );\n  }\n\n  void clearSearch() {\n    query.value = '';\n    filteredItems.assignAll(allItems);\n  }\n\n  Future<void> addSelected() async {\n    if (isAdding.value) return;\n    try {\n      isAdding.value = true;\n      await Future<void>.delayed(const Duration(milliseconds: 300));\n      Get.snackbar(AppStrings.breakfast, AppStrings.snackbarAdded);\n    } catch (_) {\n      Get.snackbar(AppStrings.breakfast, AppStrings.errorGeneric);\n    } finally {\n      isAdding.value = false;\n    }\n    void onReady() {\n      super.onReady();\n      mealName.value = 'Lunch';\n      photoAsset.value = AppImages.fishAndChipsWithPeas;\n    }\n\n    void onBack() {\n      if (Get.key.currentState?.canPop() ?? false) {\n        Get.back();\n      } else {\n        Get.snackbar('Info', 'No previous screen available.');\n      }\n    }\n\n    void openProfile() {\n      Get.snackbar('Profile', 'Navigate to Profile');\n    }\n\n    void takeAnotherPhoto() {\n      final rand = Random();\n      final next = gallery[rand.nextInt(gallery.length)];\n      photoAsset.value = next;\n      Get.snackbar(AppStrings.breakfast, AppStrings.snackbarPhoto);\n    }\n\n    void goNext() {\n      Get.snackbar('Next', 'Proceeding to next step');\n    }\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\views\\meal_capture_review_view.dart",
    "description": "Meal review screen layout; handle Next to push the next screen.",
    "content": "// file: lib/modules/meal_capture_review/views/meal_capture_review_view.dart\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_dimensions.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart' as cx;\nimport 'package:build_me_up/modules/meal_capture_review/controllers/meal_capture_review_controller.dart';\nimport 'package:build_me_up/modules/meal_capture_review/widgets/action_links_row.dart';\nimport 'package:build_me_up/shared/components/meal-list-item.dart';\nimport 'package:build_me_up/widgets/buttons/build_me_up_buttons.dart';\nimport 'package:build_me_up/shared/components/header-section-panel.dart';\nimport 'package:build_me_up/shared/components/user-avatar-icon-button.dart';\nimport 'package:build_me_up/shared/components/input-text-field.dart';\n\nclass MealCaptureReviewView extends GetView<MealCaptureReviewController> {\n  const MealCaptureReviewView({super.key});\n\n  @override\n  MealCaptureReviewController get controller =>\n      Get.put(MealCaptureReviewController(), permanent: false);\n\n  @override\n  Widget build(BuildContext context) {\n    final isPortrait = cx.ContextExtensionss(context).isPortrait;\n\n    return Scaffold(\n      body: SafeArea(\n        child: LayoutBuilder(\n          builder: (context, constraints) {\n            return SingleChildScrollView(\n              padding: EdgeInsets.only(bottom: context.heightUnit * 2),\n              child: ConstrainedBox(\n                constraints: BoxConstraints(minHeight: constraints.maxHeight),\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    // Top bar\n                    Padding(\n                      padding: EdgeInsets.symmetric(\n                        horizontal: context.widthUnit * 4,\n                        vertical: context.heightUnit * 1.5,\n                      ),\n                      child: Row(\n                        children: [\n                          Material(\n                            color: Colors.transparent,\n                            child: InkWell(\n                              onTap: controller.onBack,\n                              borderRadius: BorderRadius.circular(999),\n                              child: Padding(\n                                padding: EdgeInsets.all(\n                                  context.heightUnit * 0.8,\n                                ),\n                                child: Icon(\n                                  Icons.chevron_left,\n                                  size: context.heightUnit * 3.0,\n                                  color: AppColors.textPrimary,\n                                ),\n                              ),\n                            ),\n                          ),\n                          SizedBox(width: context.widthUnit * 2),\n                          Expanded(\n                            child: Text(\n                              AppStrings.breakfast,\n                              style: context.textTheme.titleLarge?.copyWith(\n                                color: AppColors.textDark,\n                                fontWeight: FontWeight.w600,\n                              ),\n                              overflow: TextOverflow.ellipsis,\n                            ),\n                          ),\n                          SizedBox(width: context.widthUnit * 2),\n                          UserAvatarIconButton(\n                            onTap: controller.openProfile,\n                            size: context.heightUnit * 4.2,\n                            backgroundColor: AppColors.primary,\n                          ),\n                        ],\n                      ),\n                    ),\n\n                    // Header section\n                    Obx(\n                      () => Padding(\n                        padding: EdgeInsets.symmetric(\n                          horizontal: context.widthUnit * 6,\n                        ),\n                        child: HeaderSectionPanel(\n                          height:\n                              isPortrait\n                                  ? context.heightUnit * 10.8\n                                  : context.widthUnit * 10.8,\n                          backgroundColor: AppColors.banner,\n                          title: controller.mealName.value,\n                          subtitle:\n                              '${controller.consumedCalories.value}/${controller.totalCalories.value} ${AppStrings.caloriesSuffix}',\n                          textColor: AppColors.textDark,\n                        ),\n                      ),\n                    ),\n\n                    const ActionLinksRow(),\n\n                    // Optional search\n                    Obx(\n                      () =>\n                          controller.showSearch.value\n                              ? Padding(\n                                padding: EdgeInsets.symmetric(\n                                  horizontal: context.widthUnit * 6,\n                                  vertical: context.heightUnit * 1,\n                                ),\n                                child: InputTextField(\n                                  height: context.heightUnit * 5.4,\n                                  hintText: AppStrings.search,\n                                  textInputAction: TextInputAction.search,\n                                  keyboardType: TextInputType.text,\n                                ),\n                              )\n                              : const SizedBox.shrink(),\n                    ),\n\n                    // Items list + Add button\n                    Padding(\n                      padding: EdgeInsets.symmetric(\n                        horizontal: context.widthUnit * 6,\n                        vertical: context.heightUnit * 1.0,\n                      ),\n                      child: Container(\n                        decoration: BoxDecoration(\n                          color: AppColors.surface,\n                          // If your project exposes radiusXL, keep it.\n                          // The original error says radiusXL is missing; many codebases use radiusXl.\n                          borderRadius: BorderRadius.circular(\n                            AppDimensions.radiusXL,\n                          ),\n                        ),\n                        padding: EdgeInsets.all(context.widthUnit * 4),\n                        child: Column(\n                          children: [\n                            Obx(\n                              () => ListView.separated(\n                                shrinkWrap: true,\n                                physics: const NeverScrollableScrollPhysics(),\n                                itemCount: controller.filteredItems.length,\n                                separatorBuilder:\n                                    (_, __) => SizedBox(\n                                      height: context.heightUnit * 2,\n                                    ),\n                                itemBuilder: (_, index) {\n                                  final item = controller.filteredItems[index];\n                                  final reactive = controller.allItems\n                                      .firstWhere((e) => e.id == item.id);\n                                  return MealListItem(\n                                    imagePath: reactive.assetPath,\n                                    title: reactive.name,\n                                    subtitle:\n                                        '${reactive.caloriesPerServing} ${AppStrings.caloriesSuffix}',\n                                    value: reactive.qty,\n                                    onIncrement:\n                                        () => controller.increment(reactive.id),\n                                    onDecrement:\n                                        () => controller.decrement(reactive.id),\n                                  );\n                                },\n                              ),\n                            ),\n                            SizedBox(\n                              height:\n                                  isPortrait\n                                      ? context.heightUnit * 3\n                                      : context.widthUnit * 3,\n                            ),\n                            Center(\n                              child: Obx(\n                                () => PrimaryButton(\n                                  text: AppStrings.add,\n                                  onPressed:\n                                      controller.isAdding.value\n                                          ? () {}\n                                          : controller.addSelected,\n                                  height:\n                                      isPortrait\n                                          ? context.heightUnit * 5.6\n                                          : context.widthUnit * 5.6,\n                                  borderRadius: BorderRadius.circular(\n                                    context.heightUnit * 2.6,\n                                  ),\n                                  enabled: !controller.isAdding.value,\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\widgets\\header_bar.dart",
    "description": "Header bar with back/profile; reuse or add actions supporting the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/shared/components/user-avatar-icon-button.dart';\n\nclass HeaderBar extends StatelessWidget {\n  final String title;\n  final VoidCallback onBack;\n  final VoidCallback onProfile;\n\n  const HeaderBar({\n    super.key,\n    required this.title,\n    required this.onBack,\n    required this.onProfile,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit * 6.5;\n\n    return SizedBox(\n      height: h,\n      child: Row(\n        children: [\n          Material(\n            color: Colors.transparent,\n            child: InkWell(\n              onTap: onBack,\n              borderRadius: BorderRadius.circular(h / 2),\n              child: Padding(\n                padding: EdgeInsets.all(context.widthUnit * 2.2),\n                child: Icon(\n                  Icons.chevron_left,\n                  size: context.heightUnit * 3.0,\n                  color: AppColors.textPrimary,\n                ),\n              ),\n            ),\n          ),\n          Expanded(\n            child: Text(\n              title,\n              style: TextStyle(\n                fontSize: context.heightUnit * 2.7,\n                fontWeight: FontWeight.w700,\n                color: AppColors.textPrimary,\n              ),\n            ),\n          ),\n          UserAvatarIconButton(\n            onTap: onProfile,\n            size: context.heightUnit * 4.4,\n            backgroundColor: AppColors.brand,\n            iconColor: Colors.white,\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\widgets\\link_row.dart",
    "description": "Link-style row component; wire onTap to navigate to the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass LinkRow extends StatelessWidget {\n  final IconData leadingIcon;\n  final String label;\n  final VoidCallback onTap;\n\n  const LinkRow({\n    super.key,\n    required this.leadingIcon,\n    required this.label,\n    required this.onTap,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final iconSize = context.heightUnit * 2.4;\n\n    return Align(\n      alignment: Alignment.centerLeft,\n      child: Material(\n        color: Colors.transparent,\n        child: InkWell(\n          onTap: onTap,\n          borderRadius: BorderRadius.circular(iconSize),\n          child: Padding(\n            padding: EdgeInsets.symmetric(\n              vertical: context.heightUnit * 1.0,\n            ),\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Icon(\n                  leadingIcon,\n                  size: iconSize,\n                  color: AppColors.link,\n                ),\n                SizedBox(width: context.widthUnit * 1.5),\n                Text(\n                  label,\n                  style: TextStyle(\n                    fontSize: context.heightUnit * 1.9,\n                    fontWeight: FontWeight.w500,\n                    color: AppColors.link,\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\widgets\\photo_card_with_next.dart",
    "description": "Photo card with Next button; pass onNext to navigate to the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/widgets/buttons/build_me_up_buttons.dart';\n\nclass PhotoCardWithNext extends StatelessWidget {\n  final String assetPath;\n  final VoidCallback onNext;\n\n  const PhotoCardWithNext({\n    super.key,\n    required this.assetPath,\n    required this.onNext,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final nextHeight = context.heightUnit * 5.2;\n\n    return Stack(\n      alignment: Alignment.bottomCenter,\n      children: [\n        AspectRatio(\n          aspectRatio: 3 / 4,\n          child: Container(\n            width: double.infinity,\n            decoration: BoxDecoration(\n              borderRadius: BorderRadius.circular(context.heightUnit * 2.2),\n              image: DecorationImage(\n                image: AssetImage(assetPath),\n                fit: BoxFit.cover,\n              ),\n            ),\n          ),\n        ),\n        Padding(\n          padding: EdgeInsets.only(bottom: context.heightUnit * 1.8),\n          child: PrimaryButton(\n            text: 'Next',\n            onPressed: onNext,\n            height: nextHeight,\n            borderRadius: BorderRadius.circular(nextHeight / 2),\n          ),\n        ),\n      ],\n    );\n  }\n}"
  },
  {
    "path": "lib\\shared\\components\\meal-list-item.dart",
    "description": "Reusable list item component that can be reused in the next screen's item lists.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass MealListItem extends StatelessWidget {\n  final String imagePath;\n  final String title;\n  final String subtitle;\n  final int value;\n  final VoidCallback onIncrement;\n  final VoidCallback onDecrement;\n\n  const MealListItem({\n    super.key,\n    required this.imagePath,\n    required this.title,\n    required this.subtitle,\n    required this.value,\n    required this.onIncrement,\n    required this.onDecrement,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final avatarSize = context.widthUnit * 14;\n    final radius = context.heightUnit * 1.2;\n    final actionSize = context.heightUnit * 3.2;\n    final iconSize = context.heightUnit * 2.0;\n\n    return Row(\n      children: [\n        ClipRRect(\n          borderRadius: BorderRadius.circular(radius),\n          child: Image.asset(\n            imagePath,\n            width: avatarSize,\n            height: avatarSize,\n            fit: BoxFit.cover,\n          ),\n        ),\n        SizedBox(width: context.widthUnit * 4),\n        Expanded(\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                title,\n                style: context.textTheme.bodyLarge?.copyWith(\n                  color: AppColors.textDark,\n                  fontWeight: FontWeight.w600,\n                ),\n                maxLines: 1,\n                overflow: TextOverflow.ellipsis,\n              ),\n              SizedBox(height: context.heightUnit * 0.4),\n              Text(\n                subtitle,\n                style: context.textTheme.bodySmall?.copyWith(\n                  color: AppColors.textDark,\n                  fontWeight: FontWeight.w300,\n                ),\n              ),\n            ],\n          ),\n        ),\n        SizedBox(width: context.widthUnit * 2),\n        Material(\n          color: AppColors.primary,\n          shape: const CircleBorder(),\n          clipBehavior: Clip.antiAlias,\n          child: InkWell(\n            onTap: onDecrement,\n            child: SizedBox(\n              width: actionSize,\n              height: actionSize,\n              child: Icon(Icons.remove, color: AppColors.white, size: iconSize),\n            ),\n          ),\n        ),\n        SizedBox(width: context.widthUnit * 2),\n        Text(\n          '\u0000$value',\n          style: context.textTheme.titleMedium?.copyWith(\n            color: AppColors.textDark,\n            fontWeight: FontWeight.w600,\n          ),\n        ),\n        SizedBox(width: context.widthUnit * 2),\n        Material(\n          color: AppColors.primary,\n          shape: const CircleBorder(),\n          clipBehavior: Clip.antiAlias,\n          child: InkWell(\n            onTap: onIncrement,\n            child: SizedBox(\n              width: actionSize,\n              height: actionSize,\n              child: Icon(Icons.add, color: AppColors.white, size: iconSize),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\meal_capture_review\\widgets\\action_links_row.dart",
    "description": "Action row widget where onTap handlers can navigate or trigger showing the next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/meal_capture_review/controllers/meal_capture_review_controller.dart';\n\nclass ActionLinksRow extends GetView<MealCaptureReviewController> {\n  const ActionLinksRow({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final spacing = context.widthUnit * 4;\n    return Padding(\n      padding: EdgeInsets.symmetric(horizontal: context.widthUnit * 6),\n      child: Row(\n        children: [\n          Material(\n            clipBehavior: Clip.antiAlias,\n            color: Colors.transparent,\n            child: InkWell(\n              onTap: controller.takeAnotherPhoto,\n              borderRadius: BorderRadius.circular(8),\n              child: Padding(\n                padding: EdgeInsets.symmetric(\n                  horizontal: spacing * 0.5,\n                  vertical: context.heightUnit * 0.8,\n                ),\n                child: Row(\n                  children: [\n                    Icon(Icons.chevron_left, color: AppColors.primary, size: context.heightUnit * 2.2),\n                    SizedBox(width: spacing * 0.25),\n                    Text(\n                      AppStrings.takeAnotherPhoto,\n                      style: context.textTheme.bodyMedium?.copyWith(\n                        color: AppColors.primary,\n                        fontWeight: FontWeight.w500,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n          const Spacer(),\n          Material(\n            clipBehavior: Clip.antiAlias,\n            color: Colors.transparent,\n            child: InkWell(\n              onTap: controller.toggleSearch,\n              borderRadius: BorderRadius.circular(8),\n              child: Padding(\n                padding: EdgeInsets.symmetric(\n                  horizontal: spacing * 0.5,\n                  vertical: context.heightUnit * 0.8,\n                ),\n                child: Row(\n                  children: [\n                    Icon(Icons.search, color: AppColors.primary, size: context.heightUnit * 2.0),\n                    SizedBox(width: spacing * 0.25),\n                    Text(\n                      AppStrings.search,\n                      style: context.textTheme.bodyMedium?.copyWith(\n                        color: AppColors.primary,\n                        fontWeight: FontWeight.w500,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\core\\constants\\app_dimensions.dart",
    "description": "Shared spacing and radius constants; use for consistent sizing in the next screen",
    "content": "class AppDimensions {\n  static const contentHPadPct = 0.0467; // ~left 4.67% similar to original edges\n\n  static const logoWidthFactor = 0.523364; // proportional width to match design\n  static const logoTopSpacerPct = 0.227322; // place logo start ~22.73% from top\n  static const logoMaxHeightPct = 0.224622; // logo block height ~22.46%\n  static const radiusXL = 0.224622;\n  static const titleFontPctOfH = 0.034557; // matches original proportion\n\n  static const textToButtonsTopGapPct =\n      0.093413; // gap from title bottom to first button top\n\n  static const buttonWidthFactor = 0.906542; // full-width minus margins\n  static const buttonHeightPct = 0.048596; // matches original\n  static const buttonRadiusPctOfHeight = 0.025918; // rounded corners\n  static const buttonBorderWidth = 1.5;\n\n  static const betweenButtonsGapPct = 0.025918; // vertical gap between buttons\n}\n"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\controllers\\home_controller.dart",
    "description": "GetX controller; add observables and methods to support next screen state and navigation.",
    "content": "import 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_images.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/models/day_status.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/models/recipe_model.dart';\n\nclass DailyChallengeHomeController extends GetxController {\n  final RxString userName = 'Sophia'.obs;\n  final RxInt currentDay = 7.obs;\n  final RxDouble targetKcal = 1700.0.obs;\n  final RxDouble consumedKcal = 0.0.obs;\n  final RxDouble fatTarget = 35.0.obs;\n  final RxDouble fatConsumed = 0.0.obs;\n  final RxDouble proteinTarget = 114.0.obs;\n  final RxDouble proteinConsumed = 0.0.obs;\n  final RxBool challengeStarted = false.obs;\n\n  final RxList<DayStatus> lastSixDays = RxList<DayStatus>([\n    DayStatus(dayNumber: 1, completed: true),\n    DayStatus(dayNumber: 2, completed: true),\n    DayStatus(dayNumber: 3, completed: true),\n    DayStatus(dayNumber: 4, completed: true),\n    DayStatus(dayNumber: 5, completed: true),\n    DayStatus(dayNumber: 6, completed: true),\n  ]);\n\n  final RxList<RecipeModel> recipes = RxList<RecipeModel>([\n    RecipeModel(\n      title: 'Chia Pudding',\n      kcal: 257,\n      assetPath: AppImages.chiaPuddingA,\n    ),\n    RecipeModel(\n      title: 'Veggie Quesadilla',\n      kcal: 550,\n      assetPath: AppImages.quesadilla,\n    ),\n    RecipeModel(\n      title: 'Chia Pudding',\n      kcal: 257,\n      assetPath: AppImages.chiaPuddingB,\n    ),\n    RecipeModel(\n      title: 'Chia Pudding',\n      kcal: 257,\n      assetPath: AppImages.chiaPuddingAlt,\n    ),\n  ]);\n\n  void startChallenge() {\n    challengeStarted.value = true;\n  }\n\n  void updateKcal(double consumed) {\n    consumedKcal.value = consumed.clamp(0, targetKcal.value);\n  }\n\n  void updateNutrient({double? fat, double? protein}) {\n    if (fat != null) {\n      fatConsumed.value = fat.clamp(0, fatTarget.value);\n    }\n    if (protein != null) {\n      proteinConsumed.value = protein.clamp(0, proteinTarget.value);\n    }\n  }\n\n  @override\n  void onClose() {\n    recipes.clear();\n    lastSixDays.clear();\n    super.onClose();\n  }\n}\n\nclass HomeController extends GetxController {\n  final RxInt targetKcal = 1700.obs;\n  final RxInt consumedKcal = 1200.obs;\n\n  final RxInt fatCurrent = 10.obs;\n  final RxInt fatTarget = 35.obs;\n\n  final RxInt proteinCurrent = 30.obs;\n  final RxInt proteinTarget = 115.obs;\n\n  final RxMap<String, int> mealCurrent =\n      <String, int>{'breakfast': 500, 'lunch': 0, 'snack': 0, 'dinner': 0}.obs;\n\n  final RxMap<String, int> mealTarget =\n      <String, int>{\n        'breakfast': 500,\n        'lunch': 500,\n        'snack': 200,\n        'dinner': 500,\n      }.obs;\n\n  final RxList<RecipeModel> recipes =\n      const <RecipeModel>[\n        RecipeModel(\n          title: 'Falafel Sandwich',\n          calories: 500,\n          image: AppImages.quesadilla,\n        ),\n        RecipeModel(\n          title: 'Veggie Omelets',\n          calories: 300,\n          image: AppImages.scrambledEggsOnToast,\n        ),\n      ].obs;\n\n  void addToMeal(String key, int calories) {\n    final current = mealCurrent[key] ?? 0;\n    mealCurrent[key] = current + calories;\n    consumedKcal.value = consumedKcal.value + calories;\n  }\n\n  double get mainProgress {\n    final t = targetKcal.value.toDouble();\n    if (t == 0) return 0;\n    return (consumedKcal.value / t).clamp(0, 1);\n  }\n\n  double subProgress(int current, int target) {\n    if (target == 0) return 0;\n    return (current / target).clamp(0, 1);\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\views\\daily_challenge_home_view.dart",
    "description": "Home screen composition; add navigation triggers to push the next screen via Get.to without restructuring.",
    "content": "// file: lib/modules/daily_challenge_home/views/daily_challenge_home_view.dart\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/controllers/home_controller.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/header_bar.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/meal_row_item.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/nutrition_card.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/recipes_horizontal_list.dart';\nimport 'package:build_me_up/core/routes/app_routes.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/challenge_card.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/day_chip.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/greeting_header.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/recipe_card.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/sections_header.dart';\n\nclass DailyChallengeHomeView extends StatelessWidget {\n  const DailyChallengeHomeView({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    Get.lazyPut(() => DailyChallengeHomeController());\n\n    final horizontalPadding = EdgeInsets.symmetric(\n      horizontal: context.widthUnit * 4.5,\n    );\n    final daysScrollController = ScrollController();\n    final recipesScrollController = ScrollController();\n\n    return Scaffold(\n      body: SafeArea(\n        child: LayoutBuilder(\n          builder: (context, constraints) {\n            return SingleChildScrollView(\n              padding: horizontalPadding.copyWith(\n                top: context.heightUnit * 2.5,\n                bottom: context.heightUnit * 2.0,\n              ),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: [\n                  const GreetingHeader(),\n                  SizedBox(height: context.heightUnit * 2.5),\n                  const ChallengeCard(),\n                  SizedBox(height: context.heightUnit * 2.5),\n                  SectionsHeader(\n                    title: AppStrings.last6Days,\n                    onSeeMore: () => Get.toNamed(AppRoutes.days),\n                  ),\n                  SizedBox(height: context.heightUnit * 1.5),\n                  SizedBox(\n                    height: context.heightUnit * 8.5,\n                    child: Obx(() {\n                      final items =\n                          Get.find<DailyChallengeHomeController>().lastSixDays;\n                      return Scrollbar(\n                        controller: daysScrollController,\n                        thumbVisibility: false,\n                        child: ListView.separated(\n                          controller: daysScrollController,\n                          scrollDirection: Axis.horizontal,\n                          itemBuilder: (_, i) {\n                            final item = items[i];\n                            return DayChip(\n                              dayNumber: item.dayNumber,\n                              active: item.completed,\n                            );\n                          },\n                          separatorBuilder:\n                              (_, __) =>\n                                  SizedBox(width: context.widthUnit * 3.5),\n                          itemCount: items.length,\n                        ),\n                      );\n                    }),\n                  ),\n                  SizedBox(height: context.heightUnit * 2.0),\n                  SectionsHeader(\n                    title: AppStrings.recipes,\n                    onSeeMore: () => Get.toNamed(AppRoutes.recipes),\n                  ),\n                  SizedBox(height: context.heightUnit * 1.5),\n                  SizedBox(\n                    height: context.heightUnit * 24.0,\n                    child: Obx(() {\n                      final items =\n                          Get.find<DailyChallengeHomeController>().recipes;\n                      return Scrollbar(\n                        controller: recipesScrollController,\n                        thumbVisibility: false,\n                        child: ListView.separated(\n                          controller: recipesScrollController,\n                          scrollDirection: Axis.horizontal,\n                          itemBuilder: (_, i) {\n                            final item = items[i];\n                            return RecipeCard(\n                              title: item.title,\n                              kcal: item.kcal,\n                              asset: item.assetPath,\n                              onTap: () => Get.toNamed(AppRoutes.recipes),\n                            );\n                          },\n                          separatorBuilder:\n                              (_, __) =>\n                                  SizedBox(width: context.widthUnit * 4.0),\n                          itemCount: items.length,\n                        ),\n                      );\n                    }),\n                  ),\n                  SizedBox(height: context.heightUnit * 2.0),\n                ],\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass DailyChallengeHomeView extends GetView<HomeController> {\n  const DailyChallengeHomeView({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    Get.lazyPut<HomeController>(() => HomeController(), fenix: true);\n\n    return Scaffold(\n      backgroundColor: AppColors.white,\n      body: SafeArea(\n        child: CustomScrollView(\n          slivers: [\n            const SliverToBoxAdapter(child: ChallengeHeaderBar()),\n            SliverToBoxAdapter(child: SizedBox(height: context.heightUnit * 1)),\n            const SliverToBoxAdapter(child: NutritionCard()),\n            SliverToBoxAdapter(\n              child: SizedBox(height: context.heightUnit * 2.2),\n            ),\n            SliverPadding(\n              padding: EdgeInsets.symmetric(horizontal: context.widthUnit * 4),\n              sliver: SliverList.list(\n                children: [\n                  Obx(\n                    () => MealRowItem(\n                      icon: Icons.free_breakfast,\n                      title: AppStrings.breakfast,\n                      subtitle:\n                          '${controller.mealCurrent['breakfast']}/${controller.mealTarget['breakfast']} ${AppStrings.cal}',\n                      onAdd: () => controller.addToMeal('breakfast', 100),\n                    ),\n                  ),\n                  Obx(\n                    () => MealRowItem(\n                      icon: Icons.lunch_dining,\n                      title: 'Lunch',\n                      subtitle:\n                          '${controller.mealCurrent['lunch']}/${controller.mealTarget['lunch']} ${AppStrings.cal}',\n                      onAdd: () => controller.addToMeal('lunch', 150),\n                    ),\n                  ),\n                  Obx(\n                    () => MealRowItem(\n                      icon: Icons.icecream_outlined,\n                      title: 'Snack',\n                      subtitle:\n                          '${controller.mealCurrent['snack']}/${controller.mealTarget['snack']} ${AppStrings.cal}',\n                      onAdd: () => controller.addToMeal('snack', 80),\n                    ),\n                  ),\n                  Obx(\n                    () => MealRowItem(\n                      icon: Icons.soup_kitchen_outlined,\n                      title: 'Dinner',\n                      subtitle:\n                          '${controller.mealCurrent['dinner']}/${controller.mealTarget['dinner']} ${AppStrings.cal}',\n                      onAdd: () => controller.addToMeal('dinner', 200),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n            SliverToBoxAdapter(\n              child: SizedBox(height: context.heightUnit * 2.2),\n            ),\n            const SliverToBoxAdapter(child: RecipesHorizontalList()),\n            SliverToBoxAdapter(child: SizedBox(height: context.heightUnit * 3)),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\circular_gauge.dart",
    "description": "Reusable gauge widget; reuse on the next screen with custom sizes/colors without code changes.",
    "content": "import 'dart:math' as math;\nimport 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\n\nclass CircularGauge extends StatelessWidget {\n  final double size;\n  final double thickness;\n  final double progress;\n  final Widget center;\n  final Color trackColor;\n  final Color progressColor;\n\n  const CircularGauge({\n    super.key,\n    required this.size,\n    required this.thickness,\n    required this.progress,\n    required this.center,\n    this.trackColor = AppColors.lightMint,\n    this.progressColor = AppColors.primary,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: size,\n      height: size,\n      child: CustomPaint(\n        painter: _RingPainter(\n          progress: progress,\n          thickness: thickness,\n          trackColor: trackColor,\n          progressColor: progressColor,\n        ),\n        child: Center(child: center),\n      ),\n    );\n  }\n}\n\nclass _RingPainter extends CustomPainter {\n  final double progress;\n  final double thickness;\n  final Color trackColor;\n  final Color progressColor;\n\n  _RingPainter({\n    required this.progress,\n    required this.thickness,\n    required this.trackColor,\n    required this.progressColor,\n  });\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final rect = Offset.zero & size;\n    final center = rect.center;\n    final radius = math.min(size.width, size.height) / 2;\n\n    final trackPaint = Paint()\n      ..color = trackColor\n      ..strokeWidth = thickness\n      ..style = PaintingStyle.stroke\n      ..strokeCap = StrokeCap.round;\n\n    final progressPaint = Paint()\n      ..color = progressColor\n      ..strokeWidth = thickness\n      ..style = PaintingStyle.stroke\n      ..strokeCap = StrokeCap.round;\n\n    canvas.drawArc(\n      Rect.fromCircle(center: center, radius: radius),\n      -math.pi / 2,\n      math.pi * 2,\n      false,\n      trackPaint,\n    );\n\n    final sweep = math.pi * 2 * progress;\n    canvas.drawArc(\n      Rect.fromCircle(center: center, radius: radius),\n      -math.pi / 2,\n      sweep,\n      false,\n      progressPaint,\n    );\n\n    if (progress > 0) {\n      final angle = -math.pi / 2 + sweep;\n      final knobRadius = thickness * 0.55;\n      final knobCenter = Offset(\n        center.dx + radius * math.cos(angle),\n        center.dy + radius * math.sin(angle),\n      );\n      final knobPaint = Paint()..color = progressColor;\n      canvas.drawCircle(knobCenter, knobRadius, knobPaint);\n    }\n  }\n\n  @override\n  bool shouldRepaint(covariant _RingPainter oldDelegate) {\n    return progress != oldDelegate.progress ||\n        thickness != oldDelegate.thickness ||\n        trackColor != oldDelegate.trackColor ||\n        progressColor != oldDelegate.progressColor;\n  }\n}"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\header_bar.dart",
    "description": "Shared header widget; add an action/icon to navigate to the next screen from multiple views.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/profile/views/profile_view.dart';\nimport 'package:build_me_up/shared/components/user-avatar-icon-button.dart';\n\nclass ChallengeHeaderBar extends StatelessWidget {\n  const ChallengeHeaderBar({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final titleStyle = TextStyle(\n      fontFamily: 'Roboto',\n      fontWeight: FontWeight.w600,\n      fontSize: context.heightUnit * 3.1,\n      color: AppColors.darkText,\n    );\n\n    final avatarSize = context.heightUnit * 4.6;\n\n    return Padding(\n      padding: EdgeInsets.only(\n        left: context.widthUnit * 4,\n        right: context.widthUnit * 4,\n        top: context.heightUnit * 2.2,\n        bottom: context.heightUnit * 1,\n      ),\n      child: Row(\n        children: [\n          Expanded(child: Text(AppStrings.todaysChallenge, style: titleStyle)),\n          UserAvatarIconButton(\n            onTap: () => Get.to(() => const ProfileView()),\n            size: avatarSize,\n            backgroundColor: AppColors.primary,\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\meal_row_item.dart",
    "description": "Generic list row component; reuse or add callback to open the next screen on user action.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\n\nclass MealRowItem extends StatelessWidget {\n  final IconData icon;\n  final String title;\n  final String subtitle;\n  final VoidCallback onAdd;\n\n  const MealRowItem({\n    super.key,\n    required this.icon,\n    required this.title,\n    required this.subtitle,\n    required this.onAdd,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final iconBg = Container(\n      width: context.widthUnit * 12,\n      height: context.widthUnit * 12,\n      decoration: const BoxDecoration(\n        color: AppColors.mintSurface,\n        shape: BoxShape.circle,\n      ),\n      child: Icon(icon, color: AppColors.primary, size: context.widthUnit * 7),\n    );\n\n    final textStyleTitle = TextStyle(\n      fontFamily: 'Roboto',\n      fontWeight: FontWeight.w600,\n      color: AppColors.darkText,\n      fontSize: context.heightUnit * 2.0,\n    );\n\n    final textStyleSub = TextStyle(\n      fontFamily: 'Roboto',\n      fontWeight: FontWeight.w400,\n      color: AppColors.darkText,\n      fontSize: context.heightUnit * 1.7,\n    );\n\n    final addBtnSize = context.widthUnit * 12;\n\n    return Padding(\n      padding: EdgeInsets.symmetric(vertical: context.heightUnit * 1.2),\n      child: IntrinsicHeight(\n        child: Row(\n          children: [\n            iconBg,\n            SizedBox(width: context.widthUnit * 3),\n            Expanded(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(title, style: textStyleTitle, maxLines: 1, overflow: TextOverflow.ellipsis),\n                  SizedBox(height: context.heightUnit * 0.6),\n                  Text(subtitle, style: textStyleSub, maxLines: 1, overflow: TextOverflow.ellipsis),\n                ],\n              ),\n            ),\n            SizedBox(width: context.widthUnit * 3),\n            SizedBox(\n              width: addBtnSize,\n              height: addBtnSize,\n              child: Material(\n                color: AppColors.plusBtn,\n                shape: const CircleBorder(),\n                clipBehavior: Clip.antiAlias,\n                child: InkWell(\n                  onTap: onAdd,\n                  child: Icon(Icons.add, color: AppColors.plusIcon, size: addBtnSize * 0.55),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\nutrition_card.dart",
    "description": "Summary card; wrap with GestureDetector to navigate to a detailed next screen.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_dimensions.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/controllers/home_controller.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/widgets/circular_gauge.dart';\n\nclass NutritionCard extends GetView<HomeController> {\n  const NutritionCard({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final cardPadding = EdgeInsets.all(context.widthUnit * 4);\n    final corner = BorderRadius.circular(AppDimensions.radiusXL.toDouble());\n\n    return Container(\n      width: double.infinity,\n      margin: EdgeInsets.symmetric(horizontal: context.widthUnit * 4),\n      padding: cardPadding,\n      decoration: BoxDecoration(\n        color: AppColors.mintSurface,\n        borderRadius: corner,\n      ),\n      child: Row(\n        children: [\n          Expanded(\n            flex: 6,\n            child: Obx(() {\n              final size =\n                  context.isPortrait\n                      ? context.screenWidth * 0.34\n                      : context.screenHeight * 0.34;\n              return CircularGauge(\n                size: size,\n                thickness: size * 0.12,\n                progress: controller.mainProgress,\n                center: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    Text(\n                      AppStrings.target,\n                      style: TextStyle(\n                        color: AppColors.darkText,\n                        fontFamily: 'Roboto',\n                        fontWeight: FontWeight.w600,\n                        fontSize: context.heightUnit * 2.0,\n                      ),\n                    ),\n                    SizedBox(height: context.heightUnit * 0.6),\n                    Text(\n                      '${controller.targetKcal.value} ${AppStrings.kcal}',\n                      textAlign: TextAlign.center,\n                      style: TextStyle(\n                        color: AppColors.darkText,\n                        fontFamily: 'Roboto',\n                        fontWeight: FontWeight.bold,\n                        fontSize: context.heightUnit * 2.4,\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            }),\n          ),\n          SizedBox(width: context.widthUnit * 4),\n          const Expanded(\n            flex: 5,\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                _MiniRing(title: AppStrings.fat, type: _MiniType.fat),\n                SizedBox(height: 20),\n                _MiniRing(title: AppStrings.protein, type: _MiniType.protein),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nenum _MiniType { fat, protein }\n\nclass _MiniRing extends GetView<HomeController> {\n  final String title;\n  final _MiniType type;\n\n  const _MiniRing({required this.title, required this.type});\n\n  @override\n  Widget build(BuildContext context) {\n    final isFat = type == _MiniType.fat;\n    final current = isFat ? controller.fatCurrent : controller.proteinCurrent;\n    final target = isFat ? controller.fatTarget : controller.proteinTarget;\n\n    final size = context.screenWidth * 0.2;\n    final labelStyle = TextStyle(\n      fontFamily: 'Roboto',\n      fontWeight: FontWeight.bold,\n      color: AppColors.primary,\n      fontSize: context.heightUnit * 1.8,\n    );\n    final titleStyle = TextStyle(\n      fontFamily: 'Roboto',\n      fontWeight: FontWeight.bold,\n      color: AppColors.primary,\n      fontSize: context.heightUnit * 2.2,\n    );\n\n    return Row(\n      crossAxisAlignment: CrossAxisAlignment.center,\n      children: [\n        Obx(\n          () => CircularGauge(\n            size: size,\n            thickness: size * 0.12,\n            progress: controller.subProgress(current.value, target.value),\n            center: Text(\n              '${current.value}/\\n${target.value}g',\n              textAlign: TextAlign.center,\n              style: labelStyle,\n            ),\n            trackColor: AppColors.lightMint,\n            progressColor: AppColors.primary,\n          ),\n        ),\n        SizedBox(width: context.widthUnit * 3),\n        Text(title, style: titleStyle),\n      ],\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\modules\\daily_challenge_home\\widgets\\recipes_horizontal_list.dart",
    "description": "Horizontal recipes UI; extend onTap handlers to route to the next screen or detail view.",
    "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:build_me_up/core/constants/app_colors.dart';\nimport 'package:build_me_up/core/constants/app_strings.dart';\nimport 'package:build_me_up/core/extensions/context_extensions.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/controllers/home_controller.dart';\nimport 'package:build_me_up/modules/daily_challenge_home/models/recipe_model.dart';\nimport 'package:build_me_up/modules/recipes_list/views/recipes_list_view.dart';\n\nclass RecipesHorizontalList extends GetView<HomeController> {\n  const RecipesHorizontalList({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final cardWidth = context.screenWidth * 0.44;\n    final cardHeight = context.heightUnit * 23;\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        Padding(\n          padding:\n              EdgeInsets.symmetric(horizontal: context.widthUnit * 4, vertical: context.heightUnit * 2.2),\n          child: Row(\n            children: [\n              Expanded(\n                child: Text(\n                  AppStrings.recipes,\n                  style: TextStyle(\n                    fontFamily: 'Roboto',\n                    fontWeight: FontWeight.w700,\n                    fontSize: context.heightUnit * 2.2,\n                    color: AppColors.darkText,\n                  ),\n                ),\n              ),\n              Material(\n                color: Colors.transparent,\n                child: InkWell(\n                  onTap: () => Get.to(() => const RecipesListView()),\n                  child: Padding(\n                    padding: EdgeInsets.all(context.widthUnit * 1.2),\n                    child: Text(\n                      AppStrings.seeMore,\n                      style: TextStyle(\n                        fontFamily: 'Roboto',\n                        fontWeight: FontWeight.w700,\n                        fontSize: context.heightUnit * 2.0,\n                        color: AppColors.primary,\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n        SizedBox(\n          height: cardHeight + context.heightUnit * 4,\n          child: Scrollbar(\n            thumbVisibility: false,\n            child: Obx(\n              () => ListView.separated(\n                padding: EdgeInsets.symmetric(horizontal: context.widthUnit * 4),\n                scrollDirection: Axis.horizontal,\n                itemCount: controller.recipes.length,\n                separatorBuilder: (_, __) => SizedBox(width: context.widthUnit * 4),\n                itemBuilder: (context, index) {\n                  final recipe = controller.recipes[index];\n                  return _RecipeCard(recipe: recipe, width: cardWidth, height: cardHeight);\n                },\n              ),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n\nclass _RecipeCard extends StatelessWidget {\n  final RecipeModel recipe;\n  final double width;\n  final double height;\n\n  const _RecipeCard({\n    required this.recipe,\n    required this.width,\n    required this.height,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: width,\n      height: height,\n      decoration: BoxDecoration(\n        color: AppColors.mintSurface,\n        borderRadius: BorderRadius.circular(context.heightUnit * 1.2),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          AspectRatio(\n            aspectRatio: 4 / 3,\n            child: ClipRRect(\n              borderRadius: BorderRadius.only(\n                topLeft: Radius.circular(context.heightUnit * 1.2),\n                topRight: Radius.circular(context.heightUnit * 1.2),\n              ),\n              child: Image.asset(recipe.image, fit: BoxFit.cover),\n            ),\n          ),\n          Padding(\n            padding: EdgeInsets.symmetric(\n              horizontal: context.widthUnit * 3,\n              vertical: context.heightUnit * 1.6,\n            ),\n            child: Text(\n              recipe.title,\n              maxLines: 1,\n              overflow: TextOverflow.ellipsis,\n              style: TextStyle(\n                fontFamily: 'Roboto',\n                fontWeight: FontWeight.bold,\n                fontSize: context.heightUnit * 1.9,\n                color: AppColors.darkText,\n              ),\n            ),\n          ),\n          Padding(\n            padding: EdgeInsets.symmetric(horizontal: context.widthUnit * 3),\n            child: Row(\n              children: [\n                Container(\n                  width: context.widthUnit * 4.2,\n                  height: context.widthUnit * 4.2,\n                  decoration: BoxDecoration(\n                    border: Border.all(color: AppColors.darkText, width: 0.8),\n                    shape: BoxShape.circle,\n                  ),\n                ),\n                SizedBox(width: context.widthUnit * 2),\n                Text(\n                  '${recipe.calories} ${AppStrings.kcal}',\n                  style: TextStyle(\n                    fontFamily: 'Roboto',\n                    fontWeight: FontWeight.w400,\n                    fontSize: context.heightUnit * 1.8,\n                    color: AppColors.darkText,\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}"
  },
  {
    "path": "lib\\core\\extensions\\context_extensions.dart",
    "description": "Context-based sizing and layout helpers; reuse for responsive spacing and sizing in the next screen",
    "content": "import 'package:flutter/widgets.dart';\n\nextension BuildContextX on BuildContext {\n  Size get _size => MediaQuery.sizeOf(this);\n  double get screenWidth => _size.width;\n  double get screenHeight => _size.height;\n\n  double get widthUnit => screenWidth / 100.0;\n  double get heightUnit => screenHeight / 100.0;\n\n  EdgeInsets get viewPadding => MediaQuery.viewPaddingOf(this);\n  EdgeInsets get viewInsets => MediaQuery.viewInsetsOf(this);\n}\n\nclass ContextExtensionss {\n  final BuildContext context;\n  const ContextExtensionss(this.context);\n\n  bool get isPortrait => MediaQuery.orientationOf(context) == Orientation.portrait;\n  bool get isLandscape => !isPortrait;\n}\n"
  }
]*/
