/*[
  {
    "path": "lib\\main.dart",
    "description": "Application entry point where initial route or navigation to the next screen can be configured",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/app.dart';\n\nvoid main() {\n  runApp(const HackatonEndApp());\n}\n"
  },
  {
    "path": "lib\\app.dart",
    "description": "MaterialApp configuration and provider setup where routes and navigation to a next screen can be added",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/constants/app_strings.dart';\nimport 'package:hackaton_end/features/challenge/controllers/challenge_controller.dart';\nimport 'package:hackaton_end/features/combined/combined_screens.dart';\nimport 'package:provider/provider.dart';\n\nclass HackatonEndApp extends StatelessWidget {\n  const HackatonEndApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider<ChallengeController>(\n          create: (_) => ChallengeController(),\n        ),\n      ],\n      child: MaterialApp(\n        debugShowCheckedModeBanner: false,\n        title: AppStrings.appName,\n        theme: ThemeData(\n          colorScheme: ColorScheme.fromSeed(seedColor: AppColors.primary),\n          scaffoldBackgroundColor: Colors.white,\n          useMaterial3: true,\n          textTheme: const TextTheme(\n            headlineSmall: TextStyle(fontWeight: FontWeight.w600, color: AppColors.textPrimary),\n            titleMedium: TextStyle(fontWeight: FontWeight.w600, color: AppColors.textPrimary),\n            bodyMedium: TextStyle(color: AppColors.textPrimary),\n            bodySmall: TextStyle(color: AppColors.textSecondary),\n          ),\n        ),\n        home: const CombinedScreens(),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_strings.dart",
    "description": "String constants file to add titles, labels, and copy for the next screen",
    "content": "class AppStrings {\n  static const appName = 'Hackaton End';\n  static const todaysChallenge = 'Today’s Challenge';\n  static const recipes = 'Recipes';\n  static const seeMore = 'See More';\n  static const breakfast = 'Breakfast';\n  static const lunch = 'Lunch';\n  static const snack = 'Snack';\n  static const dinner = 'Dinner';\n  static const target = 'Target';\n  static const kcal = 'Kcal';\n  static const fat = 'Fat';\n  static const protein = 'Protein';\n  static const home = 'Home';\n  static const challenge = 'Challenge';\n  static const recipesTab = 'Recipes';\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_colors.dart",
    "description": "Color palette constants to define or extend colors used by the next screen",
    "content": "import 'package:flutter/material.dart';\n\nclass AppColors {\n  static const primary = Color(0xFF396764);\n  static const primaryLight = Color(0xFF9CDBA6);\n  static const surfaceTint = Color(0xFFD9EFDC);\n  static const textPrimary = Color(0xFF354443);\n  static const textSecondary = Color(0xFF9E9E9E);\n  static const accent = Color(0xFFEEF5B2);\n  static const greyBorder = Color(0xFFC1C1C1);\n  static const cardBg = Color(0xFFF7FAF8);\n}\n"
  },
  {
    "path": "lib\\core\\constants\\app_assets.dart",
    "description": "Central asset registry to add image or icon paths required by the next screen",
    "content": "class AppAssets {\n  static const imagesRoot = 'assets/images/';\n  static const iconsRoot = 'assets/icons/';\n  static const imgFalafel = '${imagesRoot}156596d818290384b591af48aefa7a2576570250.png';\n  static const imgVeggie = '${imagesRoot}48e11008496e5fadcb6099119161e1eaec191a8d.png';\n  static const imgUnsplash1 = '${imagesRoot}0d40f9a4fcc5e0bc731499b6b8d53fab7216df0c.png';\n  static const imgUnsplash2 = '${imagesRoot}d7763eb8280df27d567a589f54b48ee41fe9eba5.png';\n}\n"
  },
  {
    "path": "lib\\features\\combined\\combined_screens.dart",
    "description": "Bottom navigation composition where a new tab or navigation entry to the next screen can be added",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/constants/app_strings.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\nimport 'package:hackaton_end/features/challenge/views/challenge_main_screen.dart';\nimport 'package:hackaton_end/features/home/views/home_screen.dart';\nimport 'package:hackaton_end/features/recipes/views/recipes_screen.dart';\n\nclass CombinedScreens extends StatefulWidget {\n  const CombinedScreens({super.key});\n\n  @override\n  State<CombinedScreens> createState() => _CombinedScreensState();\n}\n\nclass _CombinedScreensState extends State<CombinedScreens> {\n  int _index = 1;\n\n  final _pages = const [\n    HomeScreen(),\n    ChallengeMainScreen(),\n    RecipesScreen(),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return Scaffold(\n      body: SafeArea(child: _pages[_index]),\n      bottomNavigationBar: SizedBox(\n        height: h * 10.5,\n        child: BottomNavigationBar(\n          currentIndex: _index,\n          onTap: (i) => setState(() => _index = i),\n          selectedItemColor: AppColors.primary,\n          unselectedItemColor: AppColors.textSecondary,\n          backgroundColor: Colors.white,\n          showUnselectedLabels: true,\n          items: const [\n            BottomNavigationBarItem(\n              icon: Icon(Icons.home_outlined),\n              label: AppStrings.home,\n            ),\n            BottomNavigationBarItem(\n              icon: Icon(Icons.flag_rounded),\n              label: AppStrings.challenge,\n            ),\n            BottomNavigationBarItem(\n              icon: Icon(Icons.restaurant_menu_outlined),\n              label: AppStrings.recipesTab,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\home\\views\\home_screen.dart",
    "description": "Home screen placeholder that can navigate or link to the next screen for testing",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return Scaffold(\n      body: SafeArea(\n        child: Center(\n          child: Padding(\n            padding: EdgeInsets.all(h * 2),\n            child: const Text('Home'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\profile\\views\\profile_screen.dart",
    "description": "Existing navigable screen showing the pattern for pushing a next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass ProfileScreen extends StatelessWidget {\n  const ProfileScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return Scaffold(\n      appBar: AppBar(title: const Text('Profile')),\n      body: SafeArea(\n        child: Center(\n          child: Padding(\n            padding: EdgeInsets.all(h * 2),\n            child: const Text('Profile settings and details.'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\recipes\\views\\recipes_screen.dart",
    "description": "Recipes tab screen that can route to the next screen on item selection",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass RecipesScreen extends StatelessWidget {\n  const RecipesScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return Scaffold(\n      body: SafeArea(\n        child: Center(\n          child: Padding(\n            padding: EdgeInsets.all(h * 2),\n            child: const Text('Recipes'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\controllers\\challenge_controller.dart",
    "description": "Provider-backed state manager to expose data and actions needed by the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_assets.dart';\nimport 'package:hackaton_end/features/challenge/models/meal.dart';\nimport 'package:hackaton_end/features/challenge/models/nutrition_summary.dart';\nimport 'package:hackaton_end/features/challenge/models/recipe.dart';\n\nclass ChallengeController extends ChangeNotifier {\n  NutritionSummary _summary = const NutritionSummary(\n    targetCalories: 1700,\n    consumedCalories: 500,\n    targetFat: 35,\n    consumedFat: 10,\n    targetProtein: 115,\n    consumedProtein: 30,\n  );\n\n  final List<MealLog> _logs = [];\n  final Map<MealType, MealStat> _mealStats = {\n    MealType.breakfast: MealStat(title: 'Breakfast', goalCalories: 500, consumedCalories: 500),\n    MealType.lunch: MealStat(title: 'Lunch', goalCalories: 500, consumedCalories: 0),\n    MealType.snack: MealStat(title: 'Snack', goalCalories: 200, consumedCalories: 0),\n    MealType.dinner: MealStat(title: 'Dinner', goalCalories: 500, consumedCalories: 0),\n  };\n\n  final List<Recipe> _recipes = [\n    Recipe(id: 'r1', title: 'Falafel Sandwich', calories: 500, imagePath: AppAssets.imgFalafel),\n    Recipe(id: 'r2', title: 'Veggie Omelets', calories: 300, imagePath: AppAssets.imgVeggie),\n    Recipe(id: 'r3', title: 'Chicken Bowl', calories: 420, imagePath: AppAssets.imgUnsplash1),\n    Recipe(id: 'r4', title: 'Pasta Primavera', calories: 480, imagePath: AppAssets.imgUnsplash2),\n  ];\n\n  NutritionSummary get summary => _summary;\n  Map<MealType, MealStat> get mealStats => _mealStats;\n  List<Recipe> get recipes => _recipes;\n\n  void addMeal(MealLog log) {\n    _logs.add(log);\n    final prev = _mealStats[log.type]!;\n    _mealStats[log.type] = prev.copyWith(consumedCalories: prev.consumedCalories + log.calories);\n    _summary = _summary.copyWith(\n      consumedCalories: _summary.consumedCalories + log.calories,\n      consumedFat: _summary.consumedFat + log.fat,\n      consumedProtein: _summary.consumedProtein + log.protein,\n    );\n    notifyListeners();\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\challenge_main_screen.dart",
    "description": "Challenge UI screen where buttons can push or link to the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/constants/app_strings.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\nimport 'package:hackaton_end/features/challenge/controllers/challenge_controller.dart';\nimport 'package:hackaton_end/features/challenge/models/meal.dart';\nimport 'package:hackaton_end/features/challenge/views/widgets/circular_target_chart.dart';\nimport 'package:hackaton_end/features/challenge/views/widgets/meal_card.dart';\nimport 'package:hackaton_end/features/challenge/views/widgets/recipe_carousel.dart';\nimport 'package:hackaton_end/features/challenge/views/widgets/section_header.dart';\nimport 'package:hackaton_end/features/profile/views/profile_screen.dart';\nimport 'package:provider/provider.dart';\n\nclass ChallengeMainScreen extends StatelessWidget {\n  const ChallengeMainScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return Scaffold(\n      body: SafeArea(\n        child: Padding(\n          padding: EdgeInsets.symmetric(horizontal: w * 4.7),\n          child: Scrollbar(\n            thumbVisibility: false,\n            child: ListView(\n              children: [\n                SizedBox(height: h * 2.0),\n                Row(\n                  children: [\n                    Expanded(\n                      child: Text(\n                        AppStrings.todaysChallenge,\n                        style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontSize: h * 3.1),\n                      ),\n                    ),\n                    Material(\n                      color: AppColors.primary,\n                      borderRadius: BorderRadius.circular(999),\n                      clipBehavior: Clip.antiAlias,\n                      child: InkWell(\n                        onTap: () {\n                          Navigator.of(context).push(MaterialPageRoute(builder: (_) => const ProfileScreen()));\n                        },\n                        child: SizedBox(\n                          width: h * 4.2,\n                          height: h * 4.2,\n                          child: Icon(Icons.person, color: Colors.white, size: h * 2.4),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n                SizedBox(height: h * 2.2),\n                _TargetSection(),\n                SizedBox(height: h * 3.0),\n                Selector<ChallengeController, Map<MealType, dynamic>>(\n                  selector: (_, c) => c.mealStats,\n                  builder: (context, stats, _) {\n                    return Column(\n                      children: [\n                        MealCard(\n                          color: AppColors.surfaceTint,\n                          icon: Icons.free_breakfast,\n                          title: stats[MealType.breakfast]!.title,\n                          progressText: '${stats[MealType.breakfast]!.consumedCalories}/${stats[MealType.breakfast]!.goalCalories} Cal',\n                          onAdd: () => _showAddMealSheet(context, MealType.breakfast),\n                        ),\n                        SizedBox(height: h * 2.2),\n                        MealCard(\n                          color: AppColors.surfaceTint,\n                          icon: Icons.lunch_dining,\n                          title: stats[MealType.lunch]!.title,\n                          progressText: '${stats[MealType.lunch]!.consumedCalories}/${stats[MealType.lunch]!.goalCalories} Cal',\n                          onAdd: () => _showAddMealSheet(context, MealType.lunch),\n                        ),\n                        SizedBox(height: h * 2.2),\n                        MealCard(\n                          color: AppColors.surfaceTint,\n                          icon: Icons.cookie_outlined,\n                          title: stats[MealType.snack]!.title,\n                          progressText: '${stats[MealType.snack]!.consumedCalories}/${stats[MealType.snack]!.goalCalories} Cal',\n                          onAdd: () => _showAddMealSheet(context, MealType.snack),\n                        ),\n                        SizedBox(height: h * 2.2),\n                        MealCard(\n                          color: AppColors.surfaceTint,\n                          icon: Icons.dinner_dining,\n                          title: stats[MealType.dinner]!.title,\n                          progressText: '${stats[MealType.dinner]!.consumedCalories}/${stats[MealType.dinner]!.goalCalories} Cal',\n                          onAdd: () => _showAddMealSheet(context, MealType.dinner),\n                        ),\n                      ],\n                    );\n                  },\n                ),\n                SizedBox(height: h * 3.0),\n                SectionHeader(\n                  title: AppStrings.recipes,\n                  actionText: AppStrings.seeMore,\n                  onActionTap: () {\n                    Navigator.of(context).push(MaterialPageRoute(builder: (_) => const _AllRecipesScreen()));\n                  },\n                ),\n                SizedBox(height: h * 1.2),\n                const RecipeCarousel(),\n                SizedBox(height: h * 3.0),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  void _showAddMealSheet(BuildContext context, MealType type) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    final caloriesController = TextEditingController();\n    final fatController = TextEditingController();\n    final proteinController = TextEditingController();\n    showModalBottomSheet(\n      context: context,\n      isScrollControlled: true,\n      showDragHandle: true,\n      builder: (ctx) {\n        return Padding(\n          padding: EdgeInsets.only(bottom: ctx.viewInsetsBottom),\n          child: Material(\n            color: Colors.white,\n            child: Padding(\n              padding: EdgeInsets.symmetric(horizontal: w * 5, vertical: h * 2),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text('Add ${type.name[0].toUpperCase()}${type.name.substring(1)}', style: Theme.of(context).textTheme.titleMedium),\n                  SizedBox(height: h * 1.5),\n                  Row(\n                    children: [\n                      Expanded(child: _NumField(controller: caloriesController, label: 'Calories')),\n                      SizedBox(width: w * 3),\n                      Expanded(child: _NumField(controller: fatController, label: 'Fat (g)')),\n                      SizedBox(width: w * 3),\n                      Expanded(child: _NumField(controller: proteinController, label: 'Protein (g)')),\n                    ],\n                  ),\n                  SizedBox(height: h * 2),\n                  SizedBox(\n                    width: double.infinity,\n                    child: FilledButton(\n                      onPressed: () {\n                        final calories = int.tryParse(caloriesController.text.trim()) ?? 0;\n                        final fat = int.tryParse(fatController.text.trim()) ?? 0;\n                        final protein = int.tryParse(proteinController.text.trim()) ?? 0;\n                        if (calories <= 0) {\n                          Navigator.pop(ctx);\n                          return;\n                        }\n                        context.read<ChallengeController>().addMeal(MealLog(type: type, calories: calories, fat: fat, protein: protein));\n                        Navigator.pop(ctx);\n                      },\n                      child: const Text('Add'),\n                    ),\n                  ),\n                  SizedBox(height: h * 1),\n                ],\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n}\n\nclass _TargetSection extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return Container(\n      decoration: BoxDecoration(color: AppColors.surfaceTint, borderRadius: BorderRadius.circular(h * 2.0)),\n      padding: EdgeInsets.symmetric(horizontal: w * 4, vertical: h * 2.5),\n      child: Selector<ChallengeController, dynamic>(\n        selector: (_, c) => c.summary,\n        builder: (context, summary, _) {\n          return Row(\n            children: [\n              Expanded(\n                flex: 7,\n                child: AspectRatio(\n                  aspectRatio: 1,\n                  child: CircularTargetChart(\n                    caloriesProgress: summary.caloriesProgress.clamp(0.0, 1.0),\n                    caloriesTextTop: '${AppStrings.target}\\n${summary.targetCalories} ${AppStrings.kcal}',\n                  ),\n                ),\n              ),\n              SizedBox(width: w * 5),\n              Expanded(\n                flex: 6,\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    _MacroItem(\n                      circleText: '${summary.consumedFat}/\\n${summary.targetFat}g',\n                      label: AppStrings.fat,\n                      progress: summary.fatProgress.clamp(0.0, 1.0),\n                    ),\n                    SizedBox(height: h * 3.0),\n                    _MacroItem(\n                      circleText: '${summary.consumedProtein}/\\n${summary.targetProtein}g',\n                      label: AppStrings.protein,\n                      progress: summary.proteinProgress.clamp(0.0, 1.0),\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _MacroItem extends StatelessWidget {\n  final String circleText;\n  final String label;\n  final double progress;\n  const _MacroItem({required this.circleText, required this.label, required this.progress});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return Row(\n      children: [\n        SizedBox(\n          width: w * 16,\n          height: w * 16,\n          child: CustomPaint(\n            painter: _MiniRingPainter(progress: progress),\n            child: Center(\n              child: Text(\n                circleText,\n                textAlign: TextAlign.center,\n                style: TextStyle(color: AppColors.primary, fontWeight: FontWeight.bold, fontSize: h * 1.4),\n              ),\n            ),\n          ),\n        ),\n        SizedBox(width: w * 4),\n        Text(label, style: TextStyle(fontSize: h * 1.8, fontWeight: FontWeight.bold, color: AppColors.primary)),\n      ],\n    );\n  }\n}\n\nclass _MiniRingPainter extends CustomPainter {\n  final double progress;\n  _MiniRingPainter({required this.progress});\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final stroke = size.shortestSide * 0.08;\n    final rect = Offset.zero & size;\n    final bg = Paint()\n      ..style = PaintingStyle.stroke\n      ..strokeWidth = stroke\n      ..color = AppColors.primaryLight;\n    final fg = Paint()\n      ..style = PaintingStyle.stroke\n      ..strokeCap = StrokeCap.round\n      ..strokeWidth = stroke\n      ..color = AppColors.primary;\n    canvas.drawArc(rect.deflate(stroke / 2), -3.14 / 2, 2 * 3.14, false, bg);\n    canvas.drawArc(rect.deflate(stroke / 2), -3.14 / 2, 2 * 3.14 * progress, false, fg);\n  }\n\n  @override\n  bool shouldRepaint(covariant _MiniRingPainter oldDelegate) => oldDelegate.progress != progress;\n}\n\nclass _NumField extends StatelessWidget {\n  final TextEditingController controller;\n  final String label;\n  const _NumField({required this.controller, required this.label});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextField(\n      controller: controller,\n      keyboardType: TextInputType.number,\n      decoration: const InputDecoration(\n        labelText: '',\n        hintText: '',\n        border: OutlineInputBorder(),\n        isDense: true,\n      ).copyWith(labelText: label),\n    );\n  }\n}\n\nclass _AllRecipesScreen extends StatelessWidget {\n  const _AllRecipesScreen();\n\n  @override\n  Widget build(BuildContext context) {\n    final w = context.widthUnit;\n    final h = context.heightUnit;\n    final recipes = context.read<ChallengeController>().recipes;\n    return Scaffold(\n      appBar: AppBar(title: const Text('All Recipes')),\n      body: SafeArea(\n        child: Padding(\n          padding: EdgeInsets.all(w * 4),\n          child: Scrollbar(\n            child: GridView.builder(\n              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                crossAxisCount: context.isPortrait ? 2 : 4,\n                mainAxisSpacing: h * 2,\n                crossAxisSpacing: w * 3,\n                childAspectRatio: 1,\n              ),\n              itemCount: recipes.length,\n              itemBuilder: (context, index) {\n                final r = recipes[index];\n                return Material(\n                  color: Colors.white,\n                  borderRadius: BorderRadius.circular(h * 1.2),\n                  clipBehavior: Clip.antiAlias,\n                  child: InkWell(\n                    onTap: () {},\n                    child: Column(\n                      children: [\n                        Expanded(\n                          child: DecoratedBox(\n                            decoration: BoxDecoration(\n                              image: DecorationImage(image: AssetImage(r.imagePath), fit: BoxFit.cover),\n                            ),\n                          ),\n                        ),\n                        Padding(\n                          padding: EdgeInsets.all(w * 2),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text(r.title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: h * 1.45, color: AppColors.textPrimary)),\n                              SizedBox(height: h * 0.6),\n                              Row(\n                                children: [\n                                  Icon(Icons.check_box_outline_blank, size: h * 1.5, color: AppColors.textPrimary),\n                                  SizedBox(width: w * 1.5),\n                                  Text('${r.calories} Kcal', style: TextStyle(fontSize: h * 1.35, color: AppColors.textPrimary)),\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n                );\n              },\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\widgets\\meal_card.dart",
    "description": "Reusable card with action that can navigate to the next screen when pressed",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass MealCard extends StatelessWidget {\n  final Color color;\n  final IconData icon;\n  final String title;\n  final String progressText;\n  final VoidCallback onAdd;\n\n  const MealCard({\n    super.key,\n    required this.color,\n    required this.icon,\n    required this.title,\n    required this.progressText,\n    required this.onAdd,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return Container(\n      padding: EdgeInsets.symmetric(horizontal: w * 2.5),\n      decoration: BoxDecoration(color: Colors.transparent, borderRadius: BorderRadius.circular(h * 2)),\n      child: Material(\n        color: Colors.transparent,\n        child: IntrinsicHeight(\n          child: Row(\n            children: [\n              Container(\n                width: w * 12,\n                decoration: BoxDecoration(color: color, borderRadius: BorderRadius.circular(h * 2.5)),\n                alignment: Alignment.center,\n                child: Icon(icon, color: AppColors.primary, size: h * 2.4),\n              ),\n              SizedBox(width: w * 4),\n              Expanded(\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(title, style: TextStyle(fontSize: h * 1.6, fontWeight: FontWeight.w600, color: AppColors.textPrimary)),\n                    SizedBox(height: h * 0.7),\n                    Row(\n                      children: [\n                        Icon(Icons.check_box_outline_blank, size: h * 1.6, color: AppColors.textPrimary),\n                        SizedBox(width: w * 1.8),\n                        Text(progressText, style: TextStyle(fontSize: h * 1.35, color: AppColors.textPrimary)),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              SizedBox(width: w * 2),\n              Material(\n                clipBehavior: Clip.antiAlias,\n                color: AppColors.primary,\n                borderRadius: BorderRadius.circular(999),\n                child: InkWell(\n                  onTap: onAdd,\n                  child: SizedBox(\n                    width: h * 3.6,\n                    height: h * 3.6,\n                    child: Icon(Icons.add, color: Colors.white, size: h * 2.0),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\widgets\\add_button.dart",
    "description": "Reusable action button component that can be implemented to trigger navigation to a next screen",
    "content": "import 'package:flutter/material.dart';\n\nclass AddButton extends StatelessWidget {\n  final VoidCallback onTap;\n  const AddButton({super.key, required this.onTap});\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox.shrink();\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\widgets\\section_header.dart",
    "description": "Reusable section header with onActionTap that can navigate to the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass SectionHeader extends StatelessWidget {\n  final String title;\n  final String actionText;\n  final VoidCallback onActionTap;\n  const SectionHeader({super.key, required this.title, required this.actionText, required this.onActionTap});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return Row(\n      children: [\n        Expanded(\n          child: Text(title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: h * 2.15, color: AppColors.textPrimary)),\n        ),\n        Material(\n          color: Colors.transparent,\n          child: InkWell(\n            onTap: onActionTap,\n            borderRadius: BorderRadius.circular(6),\n            child: Padding(\n              padding: EdgeInsets.all(h * 0.6),\n              child: Text(actionText, style: TextStyle(fontWeight: FontWeight.bold, fontSize: h * 1.6, color: AppColors.primary)),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\widgets\\recipe_carousel.dart",
    "description": "Carousel cards where item taps can navigate to a next detail screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\nimport 'package:hackaton_end/features/challenge/controllers/challenge_controller.dart';\nimport 'package:provider/provider.dart';\n\nclass RecipeCarousel extends StatelessWidget {\n  const RecipeCarousel({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    return SizedBox(\n      height: context.isPortrait ? h * 22 : h * 35,\n      child: Selector<ChallengeController, int>(\n        selector: (_, c) => c.recipes.length,\n        builder: (context, count, _) {\n          final recipes = context.read<ChallengeController>().recipes;\n          return Scrollbar(\n            child: ListView.separated(\n              scrollDirection: Axis.horizontal,\n              padding: EdgeInsets.symmetric(horizontal: w * 1),\n              itemBuilder: (ctx, i) {\n                final r = recipes[i % recipes.length];\n                return _RecipeCard(title: r.title, calories: r.calories.toString(), imagePath: r.imagePath);\n              },\n              separatorBuilder: (_, __) => SizedBox(width: w * 3),\n              itemCount: recipes.length,\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass _RecipeCard extends StatelessWidget {\n  final String title;\n  final String calories;\n  final String imagePath;\n  const _RecipeCard({required this.title, required this.calories, required this.imagePath});\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    final w = context.widthUnit;\n    final width = w * 43;\n    return SizedBox(\n      width: width,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Material(\n            color: Colors.white,\n            borderRadius: BorderRadius.circular(h * 1.2),\n            clipBehavior: Clip.antiAlias,\n            child: InkWell(\n              onTap: () {},\n              child: AspectRatio(\n                aspectRatio: 16 / 9,\n                child: DecoratedBox(\n                  decoration: BoxDecoration(\n                    image: DecorationImage(\n                      image: AssetImage(imagePath),\n                      fit: BoxFit.cover,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n          SizedBox(height: h * 1.2),\n          Text(title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: h * 1.45, color: AppColors.textPrimary)),\n          SizedBox(height: h * 0.6),\n          Row(\n            children: [\n              Icon(Icons.check_box_outline_blank, size: h * 1.5, color: AppColors.textPrimary),\n              SizedBox(width: w * 1.5),\n              Text('$calories Kcal', style: TextStyle(fontSize: h * 1.35, color: AppColors.textPrimary)),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  },
  {
    "path": "lib\\features\\challenge\\views\\widgets\\circular_target_chart.dart",
    "description": "Reusable chart widget that can be reused or styled on the next screen",
    "content": "import 'package:flutter/material.dart';\nimport 'package:hackaton_end/core/constants/app_colors.dart';\nimport 'package:hackaton_end/core/extensions/context_extensions.dart';\n\nclass CircularTargetChart extends StatelessWidget {\n  final double caloriesProgress;\n  final String caloriesTextTop;\n\n  const CircularTargetChart({\n    super.key,\n    required this.caloriesProgress,\n    required this.caloriesTextTop,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final h = context.heightUnit;\n    return CustomPaint(\n      painter: _CaloriesPainter(progress: caloriesProgress),\n      child: Center(\n        child: FittedBox(\n          child: Padding(\n            padding: EdgeInsets.all(h * 1.2),\n            child: Text(\n              caloriesTextTop,\n              textAlign: TextAlign.center,\n              style: TextStyle(\n                color: AppColors.primary,\n                fontWeight: FontWeight.bold,\n                fontSize: h * 2.2,\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass _CaloriesPainter extends CustomPainter {\n  final double progress;\n  _CaloriesPainter({required this.progress});\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final stroke = size.shortestSide * 0.12;\n    final rect = Offset.zero & size;\n    final bg = Paint()\n      ..style = PaintingStyle.stroke\n      ..strokeWidth = stroke\n      ..color = AppColors.primaryLight;\n    final fg = Paint()\n      ..style = PaintingStyle.stroke\n      ..strokeCap = StrokeCap.round\n      ..strokeWidth = stroke\n      ..color = AppColors.primary;\n    canvas.drawArc(rect.deflate(stroke / 2), -3.14 / 2, 2 * 3.14, false, bg);\n    canvas.drawArc(rect.deflate(stroke / 2), -3.14 / 2, 2 * 3.14 * progress, false, fg);\n\n    final shadowPaint = Paint()\n      ..color = AppColors.accent.withOpacity(0.85)\n      ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 20);\n    final c = rect.center;\n    canvas.drawCircle(Offset(c.dx, c.dy + size.shortestSide * 0.15), size.shortestSide * 0.02, shadowPaint);\n  }\n\n  @override\n  bool shouldRepaint(covariant _CaloriesPainter oldDelegate) => oldDelegate.progress != progress;\n}\n"
  }
]*/