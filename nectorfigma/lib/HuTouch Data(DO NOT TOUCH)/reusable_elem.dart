// [
//   {
//     "name": "BottomNavigationBar",
//     "description": "A fixed navigation bar at the bottom of the screen with icons and labels for primary app sections: Shop, Explore, Cart, Favourite, and Account.",
//     "standardization": "Configure with a dynamic list of items (label, icon, route) and current selection/highlight. Accept a callback for handling tab changes.",
//     "styling_changes": "Minor color highlight for the selected tab and small adjustments in icon size depending on active/inactive state. Padding responsive to screen width.",
//     "code": "// lib/features/home_screen/widgets/bottom_navbar_section.dart\nimport 'package:flutter/material.dart';\nimport 'package:nectorfigma/core/constants/app_strings.dart';\nimport 'package:nectorfigma/core/constants/color_palette.dart';\nimport 'package:nectorfigma/core/constants/images_asset.dart';\n\nclass BottomNavigationBarSection extends StatelessWidget {\n  final int currentIndex;\n  final ValueChanged<int> onTabChanged;\n  const BottomNavigationBarSection({\n    super.key,\n    required this.currentIndex,\n    required this.onTabChanged,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final iconSize = MediaQuery.of(context).size.width * 0.07;\n    final activeColor = ColorPalette.primary;\n    final inactiveColor = ColorPalette.textSecondary;\n\n    final items = [\n      _BottomNavItem(\n        label: AppStrings.shop,\n        icon: ImagesAsset.shop,\n        index: 0,\n        route: '/shop',\n      ),\n      _BottomNavItem(\n        label: AppStrings.explore,\n        icon: ImagesAsset.explore,\n        index: 1,\n        route: '/explore',\n      ),\n      _BottomNavItem(\n        label: AppStrings.cart,\n        icon: ImagesAsset.cart,\n        index: 2,\n        route: '/cart',\n      ),\n      _BottomNavItem(\n        label: AppStrings.favourite,\n        icon: ImagesAsset.favourite,\n        index: 3,\n        route: '/favourite',\n      ),\n      _BottomNavItem(\n        label: AppStrings.account,\n        icon: ImagesAsset.account,\n        index: 4,\n        route: '/account',\n      ),\n    ];\n\n    return Material(\n      elevation: 8,\n      color: Theme.of(context).colorScheme.background,\n      child: Padding(\n        padding: EdgeInsets.symmetric(\n          vertical: MediaQuery.of(context).size.width * 0.015,\n        ),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: items.map((item) {\n            final bool isSelected = currentIndex == item.index;\n            return Expanded(\n              child: InkWell(\n                onTap: () => onTabChanged(item.index),\n                child: Padding(\n                  padding: EdgeInsets.symmetric(\n                    vertical: MediaQuery.of(context).size.width * 0.01,\n                  ),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Image.asset(\n                        item.icon,\n                        width: isSelected ? iconSize + 4 : iconSize,\n                        height: isSelected ? iconSize + 4 : iconSize,\n                        color: isSelected ? activeColor : inactiveColor,\n                      ),\n                      const SizedBox(height: 2),\n                      Text(\n                        item.label,\n                        style: TextStyle(\n                          fontSize: MediaQuery.of(context).size.width * 0.030,\n                          fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,\n                          color: isSelected ? activeColor : inactiveColor,\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n}\n\nclass _BottomNavItem {\n  final String label;\n  final String icon;\n  final int index;\n  final String route;\n  _BottomNavItem({\n    required this.label,\n    required this.icon,\n    required this.index,\n    required this.route,\n  });\n}\n"
//   },
//   {
//     "name": "PrimaryButton",
//     "description": "A prominent, rounded rectangular button used for primary actions such as Get Started, Log In, Sign Up, Submit, Checkout, Add To Basket, etc.",
//     "standardization": "Accept dynamic text, optional icon, and tap handler. Configurable enabled/disabled state. Optional full width or content width as prop.",
//     "styling_changes": "Color can be changed for states (enabled/disabled), minor size adjustments for width (full or content), and optional icon at start/end.",
//     "code": "// lib/features/favorites_screen/widgets/add_to_cart_button.dart\nimport 'package:flutter/material.dart';\nimport 'package:nectorfigma/core/constants/color_palette.dart';\n\nclass AddToCartButton extends StatelessWidget {\n  final String text;\n  final VoidCallback onPressed;\n  final bool isEnabled;\n  final bool fullWidth;\n  final Widget? icon;\n\n  const AddToCartButton({\n    Key? key,\n    required this.text,\n    required this.onPressed,\n    this.isEnabled = true,\n    this.fullWidth = true,\n    this.icon,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    final size = MediaQuery.of(context).size;\n    final backgroundColor = isEnabled\n        ? ColorPalette.primary\n        : ColorPalette.textSecondary.withOpacity(0.6);\n    final foregroundColor = ColorPalette.onPrimary;\n\n    final buttonChild = icon != null\n        ? Row(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              icon!,\n              SizedBox(width: size.width * 0.02),\n              Text(\n                text,\n                style: TextStyle(\n                  fontSize: size.height * 0.02,\n                  color: foregroundColor,\n                ),\n              ),\n            ],\n          )\n        : Text(\n            text,\n            style: TextStyle(\n              fontSize: size.height * 0.02,\n              color: foregroundColor,\n            ),\n          );\n\n    final button = ElevatedButton(\n      onPressed: isEnabled ? onPressed : null,\n      style: ElevatedButton.styleFrom(\n        backgroundColor: backgroundColor,\n        padding: EdgeInsets.symmetric(\n          vertical: size.height * 0.02,\n          horizontal: fullWidth ? 0 : size.width * 0.04,\n        ),\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(size.height * 0.02),\n        ),\n        minimumSize:\n            fullWidth ? const Size(double.infinity, 0) : null,\n      ),\n      child: buttonChild,\n    );\n\n    if (fullWidth) {\n      return SizedBox(width: double.infinity, child: button);\n    } else {\n      return button;\n    }\n  }\n}\n"
//   },
//   {
//     "name": "SearchBar",
//     "description": "A rounded rectangle input field with a leading search icon for store or product search.",
//     "standardization": "Accept placeholder text and value as props, with optional clear/cancel functionality and input event callbacks.",
//     "styling_changes": "Padding and width responsive to container width, but styling, icon size, and color remain consistent.",
//     "code": "// lib/features/home_screen/widgets/custom_search_widget.dart\nimport 'package:flutter/material.dart';\nimport 'package:nectorfigma/core/constants/app_strings.dart';\n\nclass CustomSearchWidget extends StatelessWidget {\n  final ValueChanged<String> onChanged;\n  const CustomSearchWidget({super.key, required this.onChanged});\n\n  @override\n  Widget build(BuildContext context) {\n    final size = MediaQuery.of(context).size;\n    return Container(\n      padding: EdgeInsets.symmetric(\n        horizontal: size.width * 0.04,\n        vertical: size.height * 0.015,\n      ),\n      decoration: BoxDecoration(\n        color: const Color.fromRGBO(241, 242, 242, 1),\n        borderRadius: BorderRadius.circular(12),\n      ),\n      child: Row(\n        children: [\n          const Icon(Icons.search, color: Color(0xFF7C7C7C)),\n          SizedBox(width: size.width * 0.02),\n          Expanded(\n            child: TextField(\n              onChanged: onChanged,\n              decoration: InputDecoration(\n                hintText: AppStrings.searchHint,\n                border: InputBorder.none,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
//   },
//   {
//     "name": "ProductGridItem",
//     "description": "A card displaying product image, name, secondary description (e.g., weight or count), price, and a circular add-to-cart button.",
//     "standardization": "Accepts dynamic image, title, subtitle, price, and a handler for add action. Add button icon is configurable for plus/checkmark.",
//     "styling_changes": "Minor adjustments in card margin or image size based on grid layout, but card structure, button position, and font sizes remain consistent.",
//     "code": "// lib/features/home_screen/widgets/product_card.dart\nimport 'package:flutter/material.dart';\nimport 'package:nectorfigma/core/constants/color_palette.dart';\nimport 'package:nectorfigma/core/constants/images_asset.dart';\n\nclass ProductCard extends StatelessWidget {\n  final String imageAsset;\n  final String title;\n  final String subtitle;\n  final String price;\n  final VoidCallback onAddToCart;\n  const ProductCard({\n    super.key,\n    required this.imageAsset,\n    required this.title,\n    required this.subtitle,\n    required this.price,\n    required this.onAddToCart,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final size = MediaQuery.of(context).size;\n    return Card(\n      shape: RoundedRectangleBorder(\n        borderRadius: BorderRadius.circular(12),\n        side: BorderSide(color: ColorPalette.border),\n      ),\n      child: Padding(\n        padding: EdgeInsets.all(size.width * 0.02),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            AspectRatio(\n              aspectRatio: 1,\n              child: Image.asset(imageAsset, fit: BoxFit.cover),\n            ),\n            SizedBox(height: size.height * 0.01),\n            Text(\n              title,\n              style: TextStyle(\n                fontSize: size.width * 0.04,\n                fontWeight: FontWeight.bold,\n                color: ColorPalette.textPrimary,\n              ),\n            ),\n            Text(\n              subtitle,\n              style: TextStyle(\n                fontSize: size.width * 0.035,\n                color: ColorPalette.textSecondary,\n              ),\n            ),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                Text(\n                  price,\n                  style: TextStyle(\n                    fontSize: size.width * 0.04,\n                    fontWeight: FontWeight.w600,\n                    color: ColorPalette.textPrimary,\n                  ),\n                ),\n                IconButton(\n                  icon: Image.asset(ImagesAsset.add, color: ColorPalette.primary),\n                  onPressed: onAddToCart,\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
//   },
//   {
//     "name": "QuantitySelector",
//     "description": "A compact control with '-' and '+' buttons around a numeric value for adjusting product quantity.",
//     "standardization": "Accepts current value, min/max constraints, and callbacks for increment/decrement. Size and icon remain consistent.",
//     "styling_changes": "Minor inner margin adjustments depending on parent container, but button size, shape, and font size remain the same.",
//     "code": "// lib/features/explore_screen/widgets/quantity_selector.dart\nimport 'package:flutter/material.dart';\n\nclass QuantitySelector extends StatelessWidget {\n  final int value;\n  final int min;\n  final int max;\n  final VoidCallback onIncrement;\n  final VoidCallback onDecrement;\n\n  const QuantitySelector({\n    super.key,\n    required this.value,\n    required this.min,\n    required this.max,\n    required this.onIncrement,\n    required this.onDecrement,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        IconButton(\n          icon: const Icon(Icons.remove),\n          onPressed: value > min ? onDecrement : null,\n        ),\n        Text('$value'),\n        IconButton(\n          icon: const Icon(Icons.add),\n          onPressed: value < max ? onIncrement : null,\n        ),\n      ],\n    );\n  }\n}\n"
//   }
// ]
